<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>版本 on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/%E7%89%88%E6%9C%AC/</link>
    <description>Recent content in 版本 on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Fri, 19 Mar 2021 17:50:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/%E7%89%88%E6%9C%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>发现 go version 的一个另类用法：你肯定想不到</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-version-detail/</link>
      <pubDate>Fri, 19 Mar 2021 17:50:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-version-detail/</guid>
      <description>大家好，我是站长 polarisxu。 对于 go version，大家应该不陌生。在很多入门教程，安装 Go 后，一般会建议执行 go version 看看是否安装成功；亦或遇到问题，别人会问你 Go 哪个版本，你也会通过 go version 命令查看。所以，go version 的一个作用是查看本地使用的 Go 版本。 但实际上，go version 还有其他用途，甚至可以说，输出本地 Go 版本号只是它功能的一个特例。先 go help version 看看： $ go help version usage: go version [-m] [-v] [file ...] Version</description>
    </item>
    
    <item>
      <title>终于找到了一款我喜欢的安装和管理 Go 版本的工具</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/go-version-manager/</link>
      <pubDate>Fri, 09 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/go-version-manager/</guid>
      <description>一直以来，我都习惯通过源码安装 Go。我是这么做的： 1）Git clone Go 源码 $ git clone https://github.com/golang/go 2）需要安装什么版本就切换到对应的分支，比如安装 1.15.x $ git checkout -b release-branch.go1.15 origin/release-branch.go1.15 如果本地之前已经存在该分支，直接 git checkout release-branch.go1.15 即可。 3）将 go 整个目录复制到 /usr/local/go1.15，编译安装 4）创建软链： ln -s go1.15 go 之后加上环境变量等。 如果想要切换版本，只需要做类似上面的步骤，最后将 go 这个软链指向要切换的</description>
    </item>
    
  </channel>
</rss>
