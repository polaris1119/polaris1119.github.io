<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/rust/</link>
    <description>Recent content in Rust on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Tue, 25 May 2021 22:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust 劝退系列 07：流程控制</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-07/</link>
      <pubDate>Tue, 25 May 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-07/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 7 个教程，探讨 Rust 中的流程控制。注意，跟其他语言一样，Rust 中有条件、循环，但没有 switch，而是有 match 模式匹配。 01 运算符 开始讲解流程控制之前，先补充一个知识点，那就是 Rust 的运算符。 Rust 支持算术运算符、关系运算符、逻辑运算符和位运算符 4 种，它们和其他语言没有什么不同，因此不细讲了，只提醒一点：Rust 中没有自</description>
    </item>
    
    <item>
      <title>Rust新书：给你一个劝退的理由</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-new-book-20210520/</link>
      <pubDate>Thu, 20 May 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-new-book-20210520/</guid>
      <description>大家好，我是 polarisxu。 过去一段时间，我每周写一篇「Rust 劝退系列」，发现阅读量越来越低。于是我在思考，怎么能够调动大家学习的热情。思考再三，我决定试试这个办法！ 最近看到机械工业出版社出了一本 Rust 新书：《Rust编程：入门、实战和进阶》，我看完目录，发现很符合我一直想要的。 我在学习 Rust 的过程中，发现目前市面上的 Rust 图书，内容组织方式和其他语言的图书不太一</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 06：常量</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-06/</link>
      <pubDate>Thu, 13 May 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-06/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 6 个教程，探讨 Rust 中的常量，因为 static 和常量有类似之处，因此一并探讨。（Rust By Example 中甚至将常量分成两种类型：const 和 static，我个人觉得常量是常量，static 修饰的是变量，不能算是常量） 01 常量 在 Rust 语言中，术语&amp;quot;常量&amp;quot;用于表示固定的值，比如 5 、-89、 I love Rust、3.14 等等。一</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 05：复合数据类型</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-05/</link>
      <pubDate>Thu, 06 May 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-05/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 5 个教程，探讨 Rust 中的复合数据类型（Compound types）。Rust 中有两种原生的复合类型：元组（tuple）和数组（array），顺带介绍切片。 01 元组类型 Go 语言没有元组类型，但多返回值有点类似元组（但还是有区别的哦）。Python 中有元组类型，因此如果你熟悉 Python，对元组应该很熟悉。 什么是元组</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 04：基本数据类型</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-04/</link>
      <pubDate>Sun, 25 Apr 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-04/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 4 个教程，探讨 Rust 中的基本数据类型，或叫标量类型（scalar type）。 Rust 和 Go 一样，都是静态类型语言，这表示每个变量的类型必须明确。和 Go 类似，大多数情况下，Rust 编译器能够推断出某个值的类型，不需要我们显示指定，写起来有点类似于弱类型似语言。但有些情况下，必须明确告知编译器我们使用什么类型，在 Rust 中，这叫</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 03：变量</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-03/</link>
      <pubDate>Mon, 19 Apr 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-03/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 3 个教程，探讨 Rust 中的变量。 01 变量和绑定 变量指定了某存储单元（Memory Location）的名称，该存储单元会存储特定类型的值。 Rust 是静态类型语言，不能在运行期改变变量类型。 和你熟悉的大部分编程语言不一样，Rust 中变量一般不叫声明，而叫做绑定（这是从函数式语言中借鉴的，使用关键字 let 绑定），那有什么区别呢？</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 02：第一个 Rust 程序</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-02/</link>
      <pubDate>Sun, 11 Apr 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-02/</guid>
      <description>大家好，我是站长 polarisxu。 上节我们准备好了 Rust 环境，现在开始我们的第一个 Rust 程序。 01 Hello World 在终端执行如下命令，创建相关目录结构： $ mkdir ~/rust-learning $ cd ~/rust-learning $ mkdir hello $ cd hello 启动 VSCode，在 Welcome 页面选择打开文件夹：~/rust-learning，在 hello 目录下创建 main.rs 文件，输入如下代码： 细心的读者可能看到了 fn 下面的三个点，鼠标放上去提示： file not included in module tree rust-analyzer(unlinked-file) 这个提示的详细说明见链接：h</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 01：打造开发环境</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-01/</link>
      <pubDate>Thu, 08 Apr 2021 10:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-01/</guid>
      <description>大家好，我是站长 polarisxu。 今天起正式 Rust “劝退”之旅。我也是在学习中，大家一起探讨交流，看谁先被劝退。在这个系列教程中，我通过和 Go 对比学习，同时只讲 Rust 最常用的特性，尽量避免入门就劝退。 工欲善其事必先利其器！本文我们先打造一个 Rust 的开发环境。 01 安装 Rust 打开 Rust 官网：https://rust-lang.org，可以切换到简体中文界面。在顶部菜单有「安装」。 对于</description>
    </item>
    
    <item>
      <title>那些想替代 C 的语言怎么样？Go、Rust、C&#43;&#43; 和 Zig 生产力对比</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/better-c-benchmark/</link>
      <pubDate>Thu, 01 Apr 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/better-c-benchmark/</guid>
      <description>C 已经快 50 岁了。对于一瓶葡萄酒来说，这个年龄很棒，但对于快速发展的行业中的编程语言而言，它就不同了。在过去的十年中，出现了许多具有不同风格的新语言，所有这些语言都试图在某种程度上成为 C 语言的替代者。 当一种新语言或多或少变得流行时 —— 开发人员开始编写基准测试，以展示该语言编写的软件性能，CPU 利用率和内存使用量以及二进制文件的大小等等。 在这里，我想在不同的层面</description>
    </item>
    
    <item>
      <title>为什么学 Rust 及相关学习资料推荐</title>
      <link>https://polarisxu.studygolang.com/posts/rust/why-rust-and-study-book/</link>
      <pubDate>Sat, 20 Feb 2021 17:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/why-rust-and-study-book/</guid>
      <description>大家好，我是站长 polarisxu。 春节结束，我的 Rust 之旅才刚刚开始。经过春节期间的学习，发现 Rust 真的是有点复杂，好吧，我觉得很复杂。如果你跟我一样，决定学习 Rust，那一定要有心理准备，要啃一块硬骨头，毕竟跟 Go 语言比起来，复杂太多了。 01 为什么要学 Rust 呢？ 看看 Google 上的结果： 爱总是能找到一堆理由，不爱亦如此。比如也有反对你学习 Rust 的，比如这篇：《我为什么反对使用 Rust</description>
    </item>
    
  </channel>
</rss>
