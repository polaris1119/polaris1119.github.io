<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/grpc/</link>
    <description>Recent content in gRPC on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Tue, 16 Mar 2021 10:00:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>周末看完这本 gRPC 的书后，我决定送 10 本给读者</title>
      <link>https://polarisxu.studygolang.com/posts/grpc/grpc-cncf-with-go-and-java/</link>
      <pubDate>Tue, 16 Mar 2021 10:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/grpc/grpc-cncf-with-go-and-java/</guid>
      <description>大家好，我是站长 polarisxu。 牛年春晚，Go语言中文网组织的活动，送了 10 本 《gRPC与云原生应用开发：以Go和Java为例》。上周末，我翻了下这本书，决定对该书做一个介绍，同时再送 10 本给我的读者。 01 gRPC 是什么？ 这是一本关于 gRPC 的书，所以简单介绍下 gRPC 是什么，相信很多人不陌生。 2015 年 2 月 26 日，谷歌宣布开源 gRPC，并称其「基于公司多年的分布式系统构建经验」。因为</description>
    </item>
    
    <item>
      <title>对 gRPC 的 Rust 和 Go 版本进行基准测试</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/benchmarking-grpc-in-rust-go/</link>
      <pubDate>Thu, 16 Jul 2020 11:15:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/benchmarking-grpc-in-rust-go/</guid>
      <description>背景 如果你计划构建可靠，内存安全 ，高性能的应用程序，那么 Rust＆Go 无疑会是你的选择。 如果您希望从内部应用程序中获得更高的性能，则可能还需要考虑使用 gRPC 而不是普通的 REST API。所有这些都是减少您的计算开销的解决方案。 我尝试比较各种库以了解它们的性能，并希望对你有所帮助。 关注的库 tower-grpc (Rust) 高性能 rust 库，尽管已被 tonic 替代 grpc-go (Golang) grpc 的官方 Go 模块 grpc-rust (Rust) 仍在开发中，另一个 rust grpc 库。看起来</description>
    </item>
    
  </channel>
</rss>
