<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Sat, 21 May 2022 17:10:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go test 如何禁用缓存？</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-test-disable-cached/</link>
      <pubDate>Sat, 21 May 2022 17:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-test-disable-cached/</guid>
      <description>大家好，我是 polarisxu。 每次执行单元测试，如果代码没有任何变动（包括可能读取的配置文件），则后续的执行，会直接读取缓存中的测试结果，同时会有一个 cached 标记。 $ go test -run ^TestPrint$ test/hello ok test/hello 0.113s $ go test -run ^TestPrint$ test/hello ok test/hello (cached) 有时候可能希望能执行实际的测试，比如看日志输出，想要禁用缓存，怎么办？ 碰到这样的问题，你一般会怎么获得答案？ 本文介绍几种方法，对你解决其他问题可能也会有帮助。 1、查</description>
    </item>
    
    <item>
      <title>Go1.18 快讯：constraints 包被移除标准库</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-move-constraints/</link>
      <pubDate>Sat, 05 Feb 2022 22:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-move-constraints/</guid>
      <description>大家好，我是 polarisxu。 Go1.18 已经发布 Beta2 版本了，正式版本预计 3 月份发布。Go1.18 最重要的特性莫过于泛型，之前写过几篇相关文章： Go泛型系列：提前掌握Go泛型的基本使用 Go泛型系列：Go1.18 类型约束那些事 Go 泛型入门教程 其中提到一个标准库新包：constraints，相关提案见：https://github.com/golang/go/issues/</description>
    </item>
    
    <item>
      <title>跟着 Go 作者学泛型</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/gophercon2021-generics/</link>
      <pubDate>Thu, 03 Feb 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/gophercon2021-generics/</guid>
      <description>大家好，我是 polarisxu。 在 GopherCon 2021 年大会上，Go 两位作者 Robert Griesemer 和 Ian Lance Taylor 做了泛型相关的演讲，即将在 Go1.18 发布的 Go 泛型，正是两位设计的。一直想着把他们的演讲做一个梳理，然后分享给大家。拖的有点久，趁春节假期整理出来了。 注意，本文中的 constraints 包，已经确定在 Go1.18 正式版中去除，放入 golang.org/x/exp 中。详细可以参考该文：Go1.18 这个包确定没了 。 Go1.18 关于泛型部分，主要有三个特性： Type parameters for functions and ty</description>
    </item>
    
    <item>
      <title>「2022 版」轻松搞定 Go 开发环境</title>
      <link>https://polarisxu.studygolang.com/posts/go/2022-dev-env/</link>
      <pubDate>Sat, 29 Jan 2022 11:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/2022-dev-env/</guid>
      <description>大家好，我是 polarisxu。 实话说，这个时候还写这么基础的文章，感觉有点太 low？但几乎每天有人开始学习 Go，那自然绕不开搭建 Go 开发环境。很多人会通过搜索网上的教程来照着做，于是发现搞不定，原因是找到的教程大部分比较老旧，都是基于 GOPATH 的。隔段时间我就会看到有人问类似的问题，所以才决定写一篇 2022 版 Go 开发环境搭建。 提醒一句，入门教程涉及到代码放入 src 目录下的，基本</description>
    </item>
    
    <item>
      <title>Go 为什么选择 Gopher 作为吉祥物？</title>
      <link>https://polarisxu.studygolang.com/posts/go/why/why-use-gopher/</link>
      <pubDate>Tue, 18 Jan 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/why/why-use-gopher/</guid>
      <description>大家好，我是 polarisxu。 Go 语言的诞生，伴随着出现了 Gopher。现在 Go 爱好者通常自称为 Gopher。实际上，Gopher 最开始只是表示 Go 的吉祥物： 那 Gopher 这个吉祥物前世今生为何？据说，有些人学 Go 是因为 Gopher 这个吉祥物~ 大约在 1999 年（远早于 Go 的诞生日）—— gopher 第一次出现在新泽西州的 WFMU radio station ，作为广播电台的宣传物。当时，Renée French 被委托为年度筹款活动设计一件 T 恤，结</description>
    </item>
    
    <item>
      <title>为 Java 开发者准备的 Go 教程 02：Java 有而 Go 无</title>
      <link>https://polarisxu.studygolang.com/posts/go/java/go-for-java02/</link>
      <pubDate>Tue, 11 Jan 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/java/go-for-java02/</guid>
      <description>大家好，我是 polarisxu。 Go 语言的设计是站在巨人的肩膀上的，它吸取了其他语言的优秀设计，同时摒弃了一些「不认可」的设计。同时，为了保持简单性，Go 的特性也比很多其他语言少。因此，Java 有一些特性，Go 没有。但没有，不代表不好。本文就看看具体有哪些。（当然，也存在 Go 有的特性，而 Java 没有） 1、多重赋值 Java 可以在一条语句中将同一个值分配给多个变量（很多 C 族语言</description>
    </item>
    
    <item>
      <title>GitHub 发现了 studygolang 项目依赖的漏洞</title>
      <link>https://polarisxu.studygolang.com/posts/go/studygolang-github-security/</link>
      <pubDate>Sat, 08 Jan 2022 15:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/studygolang-github-security/</guid>
      <description>大家好，我是 polarisxu。 今天打开 studygolang 项目的 GitHub 仓库主页，发现了一个醒目的提示： 即发现了潜在的安全漏洞。 之所以 GitHub 能够发现这个安全漏洞，前提是我之前进行了授权。之前我写过一篇文章：《重磅！GitHub 为 Go 社区带来安全支持》 ，没看过的可以看看。 查看 「Dependabot alerts」，发现是 tidwall/gjson 有漏洞： 点击可以查看该漏洞的详细信息： 所以，修复该问题很简单，在 studygolang 项</description>
    </item>
    
    <item>
      <title>为 Java 开发者准备的 Go 教程 01：漫游了</title>
      <link>https://polarisxu.studygolang.com/posts/go/java/go-for-java01/</link>
      <pubDate>Wed, 05 Jan 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/java/go-for-java01/</guid>
      <description>大家好，我是 polarisxu。 在正式工作之前，一直使用 Java，虽然这些年对 Java 的关注变少了，但很显然，Java 用户群体特别大。不过，我也知晓，有不少 Java 用户在学 Go。我尝试写一系列文章，为 Java 开发者讲解 Go 语言。 这是第一篇，从大的层面简单对比下 Go 和 Java，算作是一次漫游。 整体上，Java 和 Go 之间有许多明显而微妙的区别，包括语言层面和运行时层面。我们这里主要在语</description>
    </item>
    
    <item>
      <title>泛型版 singleflight：Go 中如何防止缓存击穿？</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/singleflight-generic/</link>
      <pubDate>Thu, 30 Dec 2021 13:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/singleflight-generic/</guid>
      <description>大家好，我是 polarisxu。 并发是 Go 的优势，但并发也需要很好的进行控制。标准库中有 sync 包，经常使用的功能有 sync.Mutex、sync.WaitGroup 等。其实，除了标准库，还有一个官方的扩展库，也叫 sync，其中有一个子包：sync/singleflight，专门做并发控制，比如防止缓存击穿。 01 从例子说起 看一个模拟缓存的例子，有如下代码： package main import ( &amp;#34;errors&amp;#34; &amp;#34;flag&amp;#34;</description>
    </item>
    
    <item>
      <title>2021 年你写了多少代码？这个 Go 工具帮你统计</title>
      <link>https://polarisxu.studygolang.com/posts/devtool/scc/</link>
      <pubDate>Tue, 28 Dec 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/devtool/scc/</guid>
      <description>大家好，我是 polarisxu。 2021 年马上要过完了，一年下来，你写了多少代码？其中 Go 代码又有多少呢？虽然大家一般讨厌将代码行数作为考核业绩指标，但我们自己对一年的代码量有一个基本掌握还是挺有必要的。 如果你搜索，会发现代码统计工具有很多。比如 sloccount 、github.com/AlDanial/cloc 等，似乎大家很喜欢统计代码行数。当然，也有人直接使用 grep、awk 之</description>
    </item>
    
  </channel>
</rss>
