<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Sun, 31 Oct 2021 22:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go：如何获得项目根目录？</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/go-std-cwd/</link>
      <pubDate>Sun, 31 Oct 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/go-std-cwd/</guid>
      <description>大家好，我是 polarisxu。 项目中，特别是 Web 项目，经常需要获得项目的根目录，进而可以访问到项目相关的其他资源，比如配置文件、静态资源文件、模板文件、数据文件、日志文件等（Go1.16 后，有些可以方便的通过 embed 内嵌进来）。比如下面的目录结构：（路径是 /Users/xuxinhua/stdcwd） ├── bin ├── cwd ├── main.go └── log ├── error.log 为了正确读取 error.</description>
    </item>
    
    <item>
      <title>Go 如何获取和设置环境变量</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/go-std-env/</link>
      <pubDate>Fri, 29 Oct 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/go-std-env/</guid>
      <description>大家好，我是 polarisxu。 今天的文章比较基础，但却是必须掌握的，而且本文有些内容，也许你之前没想过。希望这篇文章能够让你理解环境变量并掌握 Go 环境变量相关操作。 01 从安装 Go 说起 其实不止是安装 Go，其他语言一本也会有类似的问题。一般来说，安装完 Go 后，会建议将 go 可执行程序配置到 PATH 环境变量中。 比如我本地的 PATH 环境变量的值： $ echo $PATH /Users/xuxinhua/.go/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/MacOS:/Users/xuxinhua/.cargo/bin:/Users/xuxinhua/bin:/usr/local/git/bin:/Users/xuxinhua/.composer/vendor/bin:/Users/xuxinhua/go/bin 那么 PATH 环境变量的作用是什么呢？ 简单</description>
    </item>
    
    <item>
      <title>重磅变动：更快找到微信公众号里的Go文章</title>
      <link>https://polarisxu.studygolang.com/posts/wechat/find-go-articles-in-wechat/</link>
      <pubDate>Thu, 21 Oct 2021 22:50:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/wechat/find-go-articles-in-wechat/</guid>
      <description>大家好，我是 polarisxu。 搜索引擎一直是查找资料主要的方式，Go语言中文网站点的流量，近 80% 来自搜索引擎。 01 然而，微信公众号一直是一个私域，它禁止搜索引擎抓取。最近，各种 zc，大厂做了一些调整。有人发现，微信公众号删除了 robots.txt： https://mp.weixin.qq.com/robots.txt 内容是空的； robots.txt 最近一次内容 https://web.archive.org/web/20210929115539/mp.weixin.qq.com/robots.txt 所以，现在微信公众号内容可以被搜索引擎抓取了。 实际验证一下： 1）Google 2）Bi</description>
    </item>
    
    <item>
      <title>Go 这样设置版本号：我们的项目也可以</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/go-version/</link>
      <pubDate>Sat, 16 Oct 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/go-version/</guid>
      <description>大家好，我是 polarisxu。 项目中，特别是开源项目，会特别重视项目的版本号。有些项目，会把版本号写入源码中，每次升级都修改源码号。不过这不是特别好的方式。本文通过学习 Go 语言源码的处理方式来掌握它，并应用于自己的项目中。 本文基于 Go1.17，不同版本的实现细节可能有所不同 01 如何获取版本号 在 Go 语言项目中，如果要获取当前 Go 语言版本，只需要调用 runtime.V</description>
    </item>
    
    <item>
      <title>假期结束，推荐 2 本 manning 出的 Go 图书</title>
      <link>https://polarisxu.studygolang.com/posts/go/book/20211007-manning-books/</link>
      <pubDate>Thu, 07 Oct 2021 19:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/book/20211007-manning-books/</guid>
      <description>大家好，我是 polarisxu。 国庆假期结束了，大家玩的开心吗？！ 该收收心，认真学习工作了~ manning 最近有 2 本 Go 相关图书，推荐给大家。 01 Build an Orchestrator in Go 本书希望带领大家通过使用 Go 和 Docker API 构建自己的编排系统，深入了解 Kubernetes 和其他编排系统。具体来说包括： 了解构成任何编排系统的组件 将容器安排到工作节点 使用 Docker API 启动和停止容器 使用简单的 API 管理工作节点集群 使用从 cutting-edge Google Borg 研究论文中获取的算法</description>
    </item>
    
    <item>
      <title>Go Fiber 框架系列教程 04：测试应用</title>
      <link>https://polarisxu.studygolang.com/posts/go/fiber/go-fiber-basic-tutorial04/</link>
      <pubDate>Wed, 06 Oct 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/fiber/go-fiber-basic-tutorial04/</guid>
      <description>大家好，我是 polarisxu。 实际项目中，大家经常不会对 Web API 写单元测试。Go 标准库不仅有 testing 包支持普通单元测试，还有 net/http/httptest 包支持 HTTP 的测试。 本文虽然是测试 Fiber 应用程序，但对其他的框架也适用。 01 如何测试 Web API 的单元测试如何进行？ 本节介绍的测试方法主要是验证请求返回的 HTTP 状态码是否符合预期。 如果返回的状态码是 200 OK，那么表示这个测试用例成功（Pass），如果返回的状态码是 404</description>
    </item>
    
    <item>
      <title>Go Fiber 框架系列教程 03：中间件</title>
      <link>https://polarisxu.studygolang.com/posts/go/fiber/go-fiber-basic-tutorial03/</link>
      <pubDate>Tue, 05 Oct 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/fiber/go-fiber-basic-tutorial03/</guid>
      <description>大家好，我是 polarisxu。 Middleware（中间件） 是一个 Web 框架重要的组成部分，通过这种模式，可以方便的扩展框架的功能。目前 Go Web 框架都提供了 Middleware 的功能，也有众多可用的 Middleware。 Fiber 也是如此，官方提供了众多的 Middleware，方便用户直接使用。本文先看看 Fiber 中 Middleware 的定义，然后介绍 Fiber 中的几个 Middleware，最后自己实现一个 Middlewa</description>
    </item>
    
    <item>
      <title>Go泛型系列：提前掌握Go泛型的基本使用</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-basic/</link>
      <pubDate>Tue, 28 Sep 2021 23:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-basic/</guid>
      <description>泛型，是 Go 语言多年来最令人兴奋和根本性的变化之一。没有泛型，很多人以此「鄙视」Go 语言。当然，也有人觉得根本不需要泛型。有泛型，不代表你一定要用。平心而论，有些场景下，泛型还是很有必要和帮助的。 现在已经确认，Go1.18 正式包含泛型（Go1.17 已经可以试用，只是默认不支持，见之前的文章：扬眉吐气：刚刚，Go 已经默认支持泛型了 ）。 不过，不少人对泛型还是迷迷糊</description>
    </item>
    
    <item>
      <title>推荐一个 Go GUI 实战项目</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/go-wormhole-gui/</link>
      <pubDate>Wed, 22 Sep 2021 22:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/go-wormhole-gui/</guid>
      <description>大家好，我是 polarisxu。 一直以来，挺多人想尝试 Go GUI 项目的，经过这些年的发展，响应的方案也挺多的，有原生的、有基于 Web 的。其中，fyne 这个 Go GUI 框架，发展比较好。之前写过一篇文章：Go 真的也可以进行 GUI 开发：还有这样的图书呢 。 今天推荐一个开源 Go GUI 项目：wormhole-gui，项目地址：https://github.com/Jacalz/wormhole-</description>
    </item>
    
    <item>
      <title>Go Fiber 框架系列教程 02：详解相关 API 的使用</title>
      <link>https://polarisxu.studygolang.com/posts/go/fiber/go-fiber-basic-tutorial02/</link>
      <pubDate>Tue, 21 Sep 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/fiber/go-fiber-basic-tutorial02/</guid>
      <description>大家好，我是 polarisxu。 该系列第一篇文章发出后，大家褒贬不一，很正常。选什么，不选什么，大家自己评估，没有什么是最好的。我这个系列，更多只是让大家对 Fiber 有些了解，说不定正好合你胃口呢？ 前面对 Fiber 有了大概的印象。今天着重较深入探讨 Fiber 相关功能。 先从 fiber.New 函数配置开始。 01 配置 大部分 Go 框架，获得实例的函数是不支持配置的，比如 Gin、Echo 等。但 Fiber 框架的 New 函数支持传</description>
    </item>
    
  </channel>
</rss>
