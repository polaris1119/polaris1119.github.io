<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Sat, 26 Dec 2020 10:12:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>详解 Go 中的环境变量</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/environment-variables-in-golang/</link>
      <pubDate>Sat, 26 Dec 2020 10:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/environment-variables-in-golang/</guid>
      <description>了解环境变量以及在 Golang 应用程序中使用它们的不同方法。 开始之前 本教程假定你具有： 对 Go 语言的基本了解 系统上安装了最新 Golang 版本 几分钟的时间 在本文中，我们将了解环境变量以及为什么要使用它们。并且将使用内置和第三方包在 Go 应用程序中访问它们。 什么是环境变量？ 环境变量是系统级的键-值对，正在运行的进程可以访问它。这些通常用于使同一程序在不同的部署环境（例如 PROD， DEV 或 TES</description>
    </item>
    
    <item>
      <title>听说你还不知道如何查看 Go 历史文档？</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/view-go-history-std-version/</link>
      <pubDate>Thu, 17 Dec 2020 17:15:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/view-go-history-std-version/</guid>
      <description>大家好，我是站长 polarisxu。 这是一篇短文，写这篇文章主要是看到了两个信息： tonybai 写的《如何查看历史版本的 Go 文档？》 Go 官方发博文，2021 年初开始，godoc.org 默认将重定向到 pkg.go.dev ； tonybai 在文章中说了两种方法： 利用 go doc，可行，但非最优。比如 go doc http.Request。通过切换本地的 Go 版本实现查看不同版本的 Go 标准库文档； 使用 godoc 建立历史版本的 Web 化文档中心。</description>
    </item>
    
    <item>
      <title>新买了 Apple M1 Mac，却不知道如何安装 Go？</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/apple-m1-install-go/</link>
      <pubDate>Wed, 16 Dec 2020 20:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/apple-m1-install-go/</guid>
      <description>大家好，我是站长 polarisxu。 前些天有一位朋友问我： 有些朋友可能会有点奇怪，M1 有什么特别的吗？为了照顾部分童鞋，这里简单介绍下。 01 为什么会出现这个问题 大家知道不同的操作系统是很不一样的，同时不同的 CPU 架构也是很不一样的。Go 号称是跨平台的，自然要支持这些操作系统和 CPU 架构。 在 Go 中，GOOS 表示操作系统，GOARCH 表示 CPU 架构。比如你的 Linux 服务器，一般是 GO</description>
    </item>
    
    <item>
      <title>列举一些 Go1.16 中可能对大家有影响的变化</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.16-changes-2020/</link>
      <pubDate>Wed, 02 Dec 2020 19:20:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.16-changes-2020/</guid>
      <description>大家好，我是站长 polarisxu。 先说一下我一般怎么了解 Go 最新的一些动态。 01 从哪获取信息 主要通过以下方式： 逛推特，通过搜索功能，浏览 Go 信息，比如搜索：#golang since:2020-12-01 until:2020-12-02 看 Go 仓库的提交记录； 查看 https://tip.golang.org。这个一般在一个版本开发了一段时间看，比如现在可以看 Go1.16 的一些内容，主要可以看还未完成的 Release Notes：https://tip</description>
    </item>
    
    <item>
      <title>Russ Cox 又有动态了：开源了一个 Go 工具</title>
      <link>https://polarisxu.studygolang.com/posts/talk/go-rsc-dynamic/</link>
      <pubDate>Sat, 21 Nov 2020 21:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/go-rsc-dynamic/</guid>
      <description>前天发了一篇文章，介绍了 Go 的名人，Go Team 现在的 Leader Russ Cox 。 01 这两天在大牛的 GitHub 上看到他开源了一个新的工具：一个实验性的，用于 Go 语言的重构工具。 项目地址：https://github.com/rsc/rf。 开源后，立马有人跟进：https://changelog.com/news/russ-coxs-experimental-new-refactoring-tool</description>
    </item>
    
    <item>
      <title>Go 语言名人：除了 Rob Pike，很多人可能不知道他</title>
      <link>https://polarisxu.studygolang.com/posts/talk/go-celebrity-rsc/</link>
      <pubDate>Thu, 19 Nov 2020 19:20:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/go-celebrity-rsc/</guid>
      <description>大家好，我是站长 polarisxu。 今天和大家聊聊 Go 语言名人的那些事。 01 说起 Go 语言，很多人知晓有三个创始人。在 2007 年 09 月 25 日，Rob Pike 发了一封邮件： 所以一般认为 Rob Pike、Robert Griesemer 和 Ken Thompson 是 Go 的创始人，而很长一段时间，Rob Pike 在引领 Go 团队，同时在一些公众场合经常出现，因此大家对 Rob Piike 更熟悉。关于他们三个的情况，网上资料挺多的，这里不说了。 今天说的是另外一个人</description>
    </item>
    
    <item>
      <title>聊聊 Go 和创业</title>
      <link>https://polarisxu.studygolang.com/posts/talk/go-and-business/</link>
      <pubDate>Wed, 18 Nov 2020 18:40:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/go-and-business/</guid>
      <description>昨天 PingCAP 完成 D 轮 2.7 亿美元融资的消息，相信很多人看到了。PingCAP 今天的成就，对开源界真是极大的鼓舞。祝贺祝贺！ 01 PingCAP 成立于 2015 年，是一家企业级开源分布式数据库厂商，提供包括开源分布式数据库产品、解决方案与咨询、技术支持与培训认证服务，致力于为全球行业用户提供稳定高效、安全可靠、开放兼容的新型数据基础设施，解放企业生产力，加速企业数字化转型升级。 由 PingCAP 创立的分布式</description>
    </item>
    
    <item>
      <title>通过这个 Runtime 统计信息可视化库学到了什么？</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/statsview/</link>
      <pubDate>Tue, 17 Nov 2020 15:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/statsview/</guid>
      <description>大家好，我是站长 polarisxu。 掌握系统运行状态，知道系统哪些地方可能存在问题，方便进行优化，这是一个实际系统必备的。裸奔，对系统一无所知，迟早是要出大事的。 在 Go 语言中，官方标准库提供了方法，让我们能够获得内存分配、GC 和 Goroutine 等情况。比如内存、GC 等情况，可以通过 runtime.MemStats 获取：https://docs.studygolang.com/pkg/runtime/#M</description>
    </item>
    
    <item>
      <title>字节跳动面试真的也会问这样的问题？！</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/bytedance-interview-201112/</link>
      <pubDate>Thu, 12 Nov 2020 18:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/bytedance-interview-201112/</guid>
      <description>大家好，我是站长 polarisxu。 网上看到有人分享去字节跳动的面试 Go 的经验 ，从面试题来看，应该是比较初级的职位。 这份面试经验总结中（其实谈不上总结，只是面试题的记录，并没有总结分析答案），有一道 Go 相关的题，也是一个老生常谈的问题：以下代码有什么问题，怎么解决？ total, sum := 0, 0 for i := 1; i &amp;lt;= 10; i++ { sum += i go func() { total += i }() } fmt.Printf(&amp;#34;total:%d sum %d&amp;#34;, total, sum) 01 考点一 我相信很多人应该一眼看出了其中</description>
    </item>
    
    <item>
      <title>祝贺 Go 开源 11 周年</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go-opensource-11-years/</link>
      <pubDate>Tue, 10 Nov 2020 09:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go-opensource-11-years/</guid>
      <description>题图来自《了不起的程序员》 今天是 Go 语言开源 11 周年。有些人可能不太知道，简单回顾下 Go 的历史。 2007 年 Rob Pike, Robert Griesemer 和 Ken Thompson 一起创建了 Go 语言。从代码提交记录看，2008 年 3 月 3 日有了 Go 最初的规范 。 2009 年 11 月 10 日，Go 语言以开放源代码的方式向全球发布，当年获得了 TIOBE 年度编程语言称号； 2011 年 3 月 16 日，Go 语言的第一个稳定版本 r56 发布； 2012 年 3 月 28 日，Go 语言的第一个正式版本 Go1 发布，并承诺</description>
    </item>
    
  </channel>
</rss>
