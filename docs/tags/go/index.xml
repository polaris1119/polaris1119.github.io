<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Tue, 11 Jan 2022 22:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为 Java 开发者准备的 Go 教程 02：Java 有而 Go 无</title>
      <link>https://polarisxu.studygolang.com/posts/go/java/go-for-java02/</link>
      <pubDate>Tue, 11 Jan 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/java/go-for-java02/</guid>
      <description>大家好，我是 polarisxu。 Go 语言的设计是站在巨人的肩膀上的，它吸取了其他语言的优秀设计，同时摒弃了一些「不认可」的设计。同时，为了保持简单性，Go 的特性也比很多其他语言少。因此，Java 有一些特性，Go 没有。但没有，不代表不好。本文就看看具体有哪些。（当然，也存在 Go 有的特性，而 Java 没有） 1、多重赋值 Java 可以在一条语句中将同一个值分配给多个变量（很多 C 族语言</description>
    </item>
    
    <item>
      <title>GitHub 发现了 studygolang 项目依赖的漏洞</title>
      <link>https://polarisxu.studygolang.com/posts/go/studygolang-github-security/</link>
      <pubDate>Sat, 08 Jan 2022 15:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/studygolang-github-security/</guid>
      <description>大家好，我是 polarisxu。 今天打开 studygolang 项目的 GitHub 仓库主页，发现了一个醒目的提示： 即发现了潜在的安全漏洞。 之所以 GitHub 能够发现这个安全漏洞，前提是我之前进行了授权。之前我写过一篇文章：《重磅！GitHub 为 Go 社区带来安全支持》 ，没看过的可以看看。 查看 「Dependabot alerts」，发现是 tidwall/gjson 有漏洞： 点击可以查看该漏洞的详细信息： 所以，修复该问题很简单，在 studygolang 项</description>
    </item>
    
    <item>
      <title>为 Java 开发者准备的 Go 教程 01：漫游了</title>
      <link>https://polarisxu.studygolang.com/posts/go/java/go-for-java01/</link>
      <pubDate>Wed, 05 Jan 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/java/go-for-java01/</guid>
      <description>大家好，我是 polarisxu。 在正式工作之前，一直使用 Java，虽然这些年对 Java 的关注变少了，但很显然，Java 用户群体特别大。不过，我也知晓，有不少 Java 用户在学 Go。我尝试写一系列文章，为 Java 开发者讲解 Go 语言。 这是第一篇，从大的层面简单对比下 Go 和 Java，算作是一次漫游。 整体上，Java 和 Go 之间有许多明显而微妙的区别，包括语言层面和运行时层面。我们这里主要在语</description>
    </item>
    
    <item>
      <title>泛型版 singleflight：Go 中如何防止缓存击穿？</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/singleflight-generic/</link>
      <pubDate>Thu, 30 Dec 2021 13:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/singleflight-generic/</guid>
      <description>大家好，我是 polarisxu。 并发是 Go 的优势，但并发也需要很好的进行控制。标准库中有 sync 包，经常使用的功能有 sync.Mutex、sync.WaitGroup 等。其实，除了标准库，还有一个官方的扩展库，也叫 sync，其中有一个子包：sync/singleflight，专门做并发控制，比如防止缓存击穿。 01 从例子说起 看一个模拟缓存的例子，有如下代码： package main import ( &amp;#34;errors&amp;#34; &amp;#34;flag&amp;#34;</description>
    </item>
    
    <item>
      <title>2021 年你写了多少代码？这个 Go 工具帮你统计</title>
      <link>https://polarisxu.studygolang.com/posts/devtool/scc/</link>
      <pubDate>Tue, 28 Dec 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/devtool/scc/</guid>
      <description>大家好，我是 polarisxu。 2021 年马上要过完了，一年下来，你写了多少代码？其中 Go 代码又有多少呢？虽然大家一般讨厌将代码行数作为考核业绩指标，但我们自己对一年的代码量有一个基本掌握还是挺有必要的。 如果你搜索，会发现代码统计工具有很多。比如 sloccount 、github.com/AlDanial/cloc 等，似乎大家很喜欢统计代码行数。当然，也有人直接使用 grep、awk 之</description>
    </item>
    
    <item>
      <title>掌握泛型：GopherCon2021 上的泛型演讲主题</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/gophercon2021-generics/</link>
      <pubDate>Tue, 28 Dec 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/gophercon2021-generics/</guid>
      <description>大家好，我是 polarisxu。 2021 年 12 月初，GopherCon2021 举办，Robert Griesemer 和 Ian Lance Taylor 做了关于泛型的主题演讲。 https://www.youtube.com/watch?v=Pa_e9EeCdy8&amp;list=RDCMUCx9QVEApa5BKLw9r8cnOFEA&amp;index=1</description>
    </item>
    
    <item>
      <title>Go1.18 新特性：TryLock</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-trylock/</link>
      <pubDate>Sun, 26 Dec 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-trylock/</guid>
      <description>大家好，我是 polarisxu。 我们知晓，Go 标准库的 sync/Mutex、RWMutex 实现了 sync/Locker 接口， 提供了 Lock() 和 UnLock() 方法，可以获取锁和释放锁，我们可以方便的使用它来控制对共享资源的并发控制。（其他语言，比如 Java 是有类似 TryLock 的功能的） type Locker interface { Lock() Unlock() } 但是锁被获取后，在未释放之前其他 goroutine 再调用 Lock 则会被阻塞住，这种设计在有些情况下可能不能满足需求。有时我们希望尝试获取锁，</description>
    </item>
    
    <item>
      <title>Go 泛型入门教程</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-tutorial/</link>
      <pubDate>Sun, 19 Dec 2021 16:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-tutorial/</guid>
      <description>大家好，我是 polarisxu。 有泛型的 Go 版本 1.18 已经发布了 Beta1 版本，之前陆陆续续介绍了泛型，但可能有些人还是对 Go 泛型没有完整的了解，因此有这份入门教程。 01 准备工作 开始学习泛型之前，你应该安装 Go1.18 Beta1 或之后发布的版本，建议使用 goup 等版本管理工具 ，当然也可以直接通过 playground 来验证：https://go.dev/play/?v=gotip 。 不过，本教程基于本地安装 Go1.18 Beta1 为例进行。</description>
    </item>
    
    <item>
      <title>终于有 Go 版的 Elasticsearch 了</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/zinc-like-es/</link>
      <pubDate>Sun, 12 Dec 2021 22:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/zinc-like-es/</guid>
      <description>大家好，我是 polarisxu。 企业内部搭建搜索引擎常用 Solr、Elasticsearch，它们都是使用 Java 实现的，底层依赖 Lucene，Java 相对来说占用较多内存。而今天要介绍的这个项目，目标就是作为 ES 的替代者，一个轻量级搜索引擎：Zinc。 项目地址：https://github.com/prabhatsharma/zinc ，该项目开源十来天，目前 Star 数 3</description>
    </item>
    
    <item>
      <title>Go泛型系列：maps 包讲解</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-maps/</link>
      <pubDate>Sun, 05 Dec 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-maps/</guid>
      <description>大家好，我是 polarisxu。 之前文章介绍了 slices 包 ，本文介绍另一个包，用于 map 相关操作，目前同样放在 golang.org/x/exp 包下。 https://github.com/golang/exp/blob/master/maps/maps.go 01 真实的场景 不少新手，对 map 的输出是随机的有迷惑，曾经，map 的输出顺序是固定的，但官方怕大家依赖这个顺序，之后故意让输出顺序不固定。 但实际场景中，会有按某种顺序输出 map 的需求，怎么办呢？这需要对 map 的 key 进行排序，伪代码如下： for k := m { keys = append(keys, k) } sort(keys) 类似的代码</description>
    </item>
    
  </channel>
</rss>
