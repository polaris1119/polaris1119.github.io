<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Wed, 07 Jul 2021 22:10:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网友很强大，发现了Go并发下载的Bug</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/studygolang-downloader-bug/</link>
      <pubDate>Wed, 07 Jul 2021 22:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/studygolang-downloader-bug/</guid>
      <description>大家好，我是 polarisxu。 前几天我写了一篇文章：Go项目实战：一步步构建一个并发文件下载器 ，有小伙伴评论问，请求 https://studygolang.com/dl/golang/go1.16.5.src.tar.gz 为什么没有返回 Accept-Ranges。在写那篇文章时，我也试了，确实没有返回，因此我以为它不支持。 但有一个小伙伴很认真，他改用 GET 方法请求这个地址，结果却有 Accept-Ranges，于是就很困惑，问我什么原因。经过一顿操作猛如虎，终于知</description>
    </item>
    
    <item>
      <title>Go项目实战：一步步构建一个并发文件下载器</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/build-a-concurrent-file-downloader/</link>
      <pubDate>Sat, 03 Jul 2021 22:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/build-a-concurrent-file-downloader/</guid>
      <description>大家好，我是 polarisxu。 今天为大家带来一个实战项目。建议你一定要动手实践。 在往下看之前，你不妨思考下，用 Go 如何实现一个并发下载器。（我之前有推荐过一个类似的开源项目：推荐三个Go实战开源项目 ） 01 原理 对于服务器上的某个文件，我们要并发下载到本地，很容易想到，应该将文件分成多个部分，然后开多个 goroutine 并发地去下载，最后将这多个部分合并成一个文件，实现并发下载的</description>
    </item>
    
    <item>
      <title>这本 Go 新书挺期待的：100 个常见错误</title>
      <link>https://polarisxu.studygolang.com/posts/go/book/100-go-mistakes/</link>
      <pubDate>Tue, 29 Jun 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/book/100-go-mistakes/</guid>
      <description>大家好，我是 polarisxu。 Go 虽然简单，但一样会有很多容易犯的错误。网上也有不少总结的 Go 常见错误。 Teiva Harsanyi 在 2019 年发表过一篇文章：《The Top 10 Most Common Mistakes I’ve Seen in Go Projects》 （这里有中文版：https://tomotoes.com/blog/the-top-10-most-common-mistakes-ive-seen-in-go-projects/）</description>
    </item>
    
    <item>
      <title>Go 启用新的官方问答社区</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/collectives-go/</link>
      <pubDate>Thu, 24 Jun 2021 23:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/collectives-go/</guid>
      <description>大家好，我是 polarisxu。 Go 官方宣布，在 StackOverflow 上启用新的问答社区，而这之前，官方的主要在 Google Groups。先简单介绍下 StackOverflow 的 Collective 。 01 Collective 是什么？ 我们知道 StackOverflow 是一个问答社区，针对某一个类问题，一般通过 Tag 的形式汇集，比如 Go 语言的：https://stackoverflow.com/questions/tagged/go。而 Collective 是 StackOverflow 推出的，专门用于为你喜欢的技术构建一个社区</description>
    </item>
    
    <item>
      <title>这是要干嘛？！微软招 Go 编译器全职开发人员</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/microsoft-go/</link>
      <pubDate>Thu, 24 Jun 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/microsoft-go/</guid>
      <description>大家好，我是 polarisxu。 微软在其招聘主页上挂了一个招聘信息，招聘高级软件工程师（职位链接：https://careers.microsoft.com/us/en/job/1038385/Senior-Software-Engineer）。这个职位有点特别： 个人贡献者。具体来说，找为 Go 语言编译器和工具开发的全职员工。 我们都知道，一直以来，微软搞了不少开</description>
    </item>
    
    <item>
      <title>Go1.17 快报之标准库越来越注重易用性</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/go1.17-std/</link>
      <pubDate>Tue, 22 Jun 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/go1.17-std/</guid>
      <description>大家好，我是 polarisxu。 说起 Go 的优点，很多人会提到 Go 拥有强大的标准库，比如开发一个 HTTP 服务，几行代码就搞定。不过，如果是一个 PHPer 转到 Go，又会觉得 Go 标准库不够便利，很多东西都需要自己二次封装。这其实是一个取舍的问题。 Go 官方也在不断完善、优化标准库，在坚持一定原则的基础上，尽可能让标准库好用、易用。今天就看看 Go1.17 中，官方在这方面做了哪些改进。 01 time 包 Unix 时间戳，</description>
    </item>
    
    <item>
      <title>Go1.17 新特性之切片变数组</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-slice-to-array/</link>
      <pubDate>Thu, 17 Jun 2021 07:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-slice-to-array/</guid>
      <description>大家好，我是 polarisxu。 按计划，Go 1.17 会在 2021 年 8 月份发布（目前已经发布了 Beta1 版本）。目前，1.17 相关的功能已经开发差不多了，上次介绍了测试顺序随机的问题，今天介绍 1.17 中的另一个新功能：切片显式地转换成数组指针。 温馨提示，如果要试验该功能，需要升级到 1.17 Beta1 版本。另外一个主意事项就是如果在有 go.mod 的目录中试验，确保其中的版本改为 1.17，否则会报错：conver</description>
    </item>
    
    <item>
      <title>回顾 Go 官网的演变史</title>
      <link>https://polarisxu.studygolang.com/posts/go/golangorg-website/</link>
      <pubDate>Mon, 14 Jun 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/golangorg-website/</guid>
      <description>大家好，我是 polarisxu。 最近 618，阿里云等云厂商都在促销，我之前有一台服务器在华为云，正好要过期了，发现续费要 2500 左右。而阿里云新客买一台服务器，3 年才 179.9（1 核 2 G），用来镜像一个 Go 官网还是绰绰有余的。因为很早就镜像过 Go 官网，这次发现官网搭建又有了很大变化，因此决定回顾下 Go 官网的演变。 新人常年有优惠，比如 99 元/年。有兴趣的可以购买：https</description>
    </item>
    
    <item>
      <title>站长8年前的Go代码竟然进入大厂的项目里了</title>
      <link>https://polarisxu.studygolang.com/posts/talk/about-writing/</link>
      <pubDate>Sun, 13 Jun 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/about-writing/</guid>
      <description>大家好，我是 polarisxu。 在群里有一位大厂大佬发了这么一条信息： 有点惊住了！ 这是我在 2013 年 1 月写的一篇关于 RSA 的文章：《GO加密解密之RSA》 ，没想到进入了大厂的项目里。只不过，这 CTRL + C、CTRL +V 有点小猛，邮箱地址直接进入了仓库。。。不愧是： 群友们很有才，说可以写一篇文章：当初写下的示例程序，已然在巨头大厂安稳运行 6 年，创造的价值数以亿记。 这件事还是有些</description>
    </item>
    
    <item>
      <title>Go图书翻译：一个好消息，一个坏消息</title>
      <link>https://polarisxu.studygolang.com/posts/go/book/practical-go-lessons-decline/</link>
      <pubDate>Sat, 12 Jun 2021 21:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/book/practical-go-lessons-decline/</guid>
      <description>大家好，我是 polarisxu。 看到广大 gopher 们的需求，昨天我发文宣布组织翻译《Practical Go Lessons》 这本书。发文后，有将近一百人要参与。感受到了大家的热情~ 昨天下午，我给作者发信息，请求授权我们翻译。昨天一天没有回应（虽然看到信息已读，但没有给我答复）。但我们觉得，大概率会取得授权，所以，昨天做好了准备工作：流程、规范等，并且大家觉得端午节假期可</description>
    </item>
    
  </channel>
</rss>
