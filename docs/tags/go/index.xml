<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Sun, 01 Nov 2020 18:12:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>提前试用将在 Go1.16 中发布的内嵌静态资源功能</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go-embed-try/</link>
      <pubDate>Sun, 01 Nov 2020 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go-embed-try/</guid>
      <description>大家好，我是站长 polarisxu。 喜欢 Go 语言有很多理由，其中有一点“因为编译为一个二进制文件，直接运行，没有其他依赖，使得部署特别容易。”</description>
    </item>
    
    <item>
      <title>AI 和 数据科学领域，Go 语言可能很快会取代 Python。最后的原因有点迷</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/golang-ai-programming-language/</link>
      <pubDate>Thu, 29 Oct 2020 21:40:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/golang-ai-programming-language/</guid>
      <description>30 年前，Python 首次出现。但是花了 20 年时间才能获得开发人员的赏识。快进到 2019 年，它成为开发人员中第二受欢迎的语言。（来自 Stackoverflow 开发人员 2019 调查结</description>
    </item>
    
    <item>
      <title>闲聊昨晚极客时间的直播</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/talk-geek-time-live/</link>
      <pubDate>Mon, 26 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/talk-geek-time-live/</guid>
      <description>昨天晚上（10 月 25 日）极客时间进行了一场直播，主题是：《未来 5 年将是 Go 语言的天下》。 客观说，这个主题还是挺唬人的，而直播的内容跟这个主题关系</description>
    </item>
    
    <item>
      <title>Go error 打印灾难 —  CockroachDB errors 库（第3篇）</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/go-error-printing-catastrophe/</link>
      <pubDate>Mon, 26 Oct 2020 11:15:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/go-error-printing-catastrophe/</guid>
      <description>这篇文章是关于 “CockroachDB errors 库” 的系列文章的第 3 篇，“CockroachDB errors 库”实际上是 Go 的标准 errors 包的通用、开放源码的替代品。</description>
    </item>
    
    <item>
      <title>Go 格式化 API —  CockroachDB errors 库（第2篇）</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/go-formatting-apis/</link>
      <pubDate>Sat, 24 Oct 2020 11:15:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/go-formatting-apis/</guid>
      <description>这篇文章是关于 “CockroachDB errors 库” 的系列文章的第 2 篇，“CockroachDB errors 库”实际上是 Go 的标准 errors 包的通用、开放源码的替代品。</description>
    </item>
    
    <item>
      <title>Go 标准错误 API — CockroachDB errors 库（第1篇）</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/cockroachdb-errors-std-api/</link>
      <pubDate>Fri, 23 Oct 2020 11:15:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/cockroachdb-errors-std-api/</guid>
      <description>这篇文章是关于 “CockroachDB errors 库” 的系列文章的第 1 篇，“CockroachDB errors 库”实际上是 Go 的标准 errors 包的通用、开放源码的替代品。</description>
    </item>
    
    <item>
      <title>一道关于 json 和 slice 的题难倒了 80% 的人</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/interview-slice-json/</link>
      <pubDate>Sun, 18 Oct 2020 14:18:50 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/interview-slice-json/</guid>
      <description>昨天在 Go语言爱好者周刊：第 65 期 刊首语发了一道题，以下代码输出什么？ package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type AutoGenerated struct { Age int `json:&amp;#34;age&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Child []int `json:&amp;#34;child&amp;#34;` } func main() { jsonStr1 := `{&amp;#34;age&amp;#34;: 14,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), &amp;amp;a) aa</description>
    </item>
    
    <item>
      <title>你喜欢的 Go 第三方库：一步为系统集成可视化实时运行时统计</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/statsviz/</link>
      <pubDate>Thu, 15 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/statsviz/</guid>
      <description>大家好，我是站长 polarisxu。 掌握系统运行状态，知道系统哪些地方可能存在问题，方便进行优化，这是一个实际系统必备的。裸奔，对系统一无所</description>
    </item>
    
    <item>
      <title>Go Playground 还能这么玩？</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/usingg-gpgsync/</link>
      <pubDate>Fri, 09 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/usingg-gpgsync/</guid>
      <description>大家好，我是 polarisxu。 之前我为大家推荐过 Playground，对比了三款 Go Playground 。今天发现了另外一款 Playground，它最核心的特</description>
    </item>
    
    <item>
      <title>终于找到了一款我喜欢的安装和管理 Go 版本的工具</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/go-version-manager/</link>
      <pubDate>Fri, 09 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/go-version-manager/</guid>
      <description>一直以来，我都习惯通过源码安装 Go。我是这么做的： 1）Git clone Go 源码 $ git clone https://github.com/golang/go 2）需要安装什么版本就切换到对应的分支，比如安装 1.15.x $ git checkout -b release-branch.go1.15 origin/release-branch.go1.15 如</description>
    </item>
    
  </channel>
</rss>
