<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Fri, 23 Apr 2021 12:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的 Go 语言书单</title>
      <link>https://polarisxu.studygolang.com/posts/go/book/20210423-go-book-list/</link>
      <pubDate>Fri, 23 Apr 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/book/20210423-go-book-list/</guid>
      <description>大家好，我是站长 polarisxu。 今天是 4 月 23 日，是世界读书日。当当有很大的优惠，而且我还要到了额外的优惠码，花 140 可以买到 400 块钱的书。借这个机会，我分享一份 Go 语言书单（实际上还有很多免费电子书单，但这里只说纸质版），需要的可以今天购买，超便宜！ 我认为不错的书，不代表你也认为好。所以，买不买自行判断哈。 01 入门级 以下排名不分先后。 Go 程序设计语言（俗称 Go 圣经） 本</description>
    </item>
    
    <item>
      <title>我又来推荐免费 Go 新书了：一本用 Go 讲架构的书</title>
      <link>https://polarisxu.studygolang.com/posts/go/book/go-with-the-domain/</link>
      <pubDate>Mon, 19 Apr 2021 08:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/book/go-with-the-domain/</guid>
      <description>大家好，我是站长 polarisxu。 我又来给大家推荐 Go 新书了，免费的哦。说明一点，这本书我只是浏览了下目录，看了下介绍，感觉应该还可以，值得读一读。书名是：《Go With The Domain》。 先介绍下该书的作者。Miłosz 和 Robert，他们是 Three Dots Labs 的创始人，这是一个什么组织呢？官网上是这么介绍的： Golang, Domain-Driven Design and Continuous Delivery. 关注 Go 领域驱动设计和持续交付，所以，这本书也是和这方面有</description>
    </item>
    
    <item>
      <title>注释竟然还有特殊用途？一文解惑 //go:linkname 指令</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-linkname/</link>
      <pubDate>Thu, 15 Apr 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-linkname/</guid>
      <description>大家好，我是站长 polarisxu。 我之前写过一篇文章：为什么 Go 标准库中有些函数只有签名，没有函数体？ ，其中有一点就是 //go:linkname 这个指令。 Go 中类似的指令挺多的，比如 Go1.16 中的 //go:embed。前些天有人问我，为什么它用 //go:embed 不起作用？我一看，它是这么写的：// go:embed，不知道你看到问题了没有？是的，指令是通过注释的方式，但有三点要求，要特别注意： // 后不能有空格。</description>
    </item>
    
    <item>
      <title>一道 Go 闭包题，面试官说原来自己答错了：面别人也涨知识</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/go-closure/</link>
      <pubDate>Tue, 13 Apr 2021 18:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/go-closure/</guid>
      <description>大家好，我是站长 polarisxu。 通常，JS 面试，闭包应该是必考的题目。随着越来越多的语言对函数式范式的支持，闭包问题经常出现。在 Go 语言中也是如此。 本文从一道题引出 Go 中的闭包。这是 Go 语言爱好者周刊第 90 期的一道题目。以下代码输出什么？ package main import &amp;#34;fmt&amp;#34; func app() func(string) string { t := &amp;#34;Hi&amp;#34; c := func(b string) string { t = t + &amp;#34; &amp;#34; + b return t } return c } func main() { a := app() b := app() a(&amp;#34;go&amp;#34;) fmt.Println(b(&amp;#34;All&amp;#34;)) } 这道题目答对的人蛮多的：60%。不管你</description>
    </item>
    
    <item>
      <title>答应我，这次一定彻底搞懂 Go 中的类型别名</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/type-and-alias/</link>
      <pubDate>Wed, 07 Apr 2021 17:20:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/type-and-alias/</guid>
      <description>大家好，我是站长 polarisxu。 有下面 3 行代码： // 32 位机器 1）var x int32 = 32.0 2）var y int = x 3）var z rune = x 它们是否能编译通过？为什么？ 如果面试时问这道题，你需要想想面试官想考察你什么。在往下看之前，建议你记下自己的答案。 01 数字字面量 在 Go 语言中，字面量是无类型（untyped）的。无类型是什么意思？无类型意味着可以赋值给类似类型的变量或常量。用上面例</description>
    </item>
    
    <item>
      <title>那些想替代 C 的语言怎么样？Go、Rust、C&#43;&#43; 和 Zig 生产力对比</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/better-c-benchmark/</link>
      <pubDate>Thu, 01 Apr 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/better-c-benchmark/</guid>
      <description>C 已经快 50 岁了。对于一瓶葡萄酒来说，这个年龄很棒，但对于快速发展的行业中的编程语言而言，它就不同了。在过去的十年中，出现了许多具有不同风格的新语言，所有这些语言都试图在某种程度上成为 C 语言的替代者。 当一种新语言或多或少变得流行时 —— 开发人员开始编写基准测试，以展示该语言编写的软件性能，CPU 利用率和内存使用量以及二进制文件的大小等等。 在这里，我想在不同的层面</description>
    </item>
    
    <item>
      <title>我无语了，Go 中 &#43;-*/ 四个运算符竟然可以连着用</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/operator/</link>
      <pubDate>Wed, 31 Mar 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/operator/</guid>
      <description>大家好，我是站长 polarisxu。 我计划把类似这样的文章归为：奇淫技巧，你认同吗？ 看到 Go101（玩 twtter 的可以关注他） 发了一条消息，+-*/ 这四个竟然可以连着写： package main func main() { v := new(int) *v = 2 println(5/+-*v) } 我看到后，试着运行了一下，竟然输出了 -2 。。。我忍不住“卧槽”。。。 我不得不说，Go101 扣的真细节。 于是我尝试着找一些线索，看看为什么可以这样写。 01 直接看汇编 遇到一些不解的</description>
    </item>
    
    <item>
      <title>Go周刊题解：切片的另类初始化 — 该题正确率出奇的低</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/weekly-question-88/</link>
      <pubDate>Tue, 30 Mar 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/weekly-question-88/</guid>
      <description>大家好，我是站长 polarisxu。 我在 Go 语言爱好者周刊第 87 和 88 期 刊首出了两道题，这两道题有点类似，都是和切片初始化有关。但这两道的题正确率比较低，特别是 88 期的题。 第 87 期题目如下： package main import ( &amp;#34;fmt&amp;#34; ) func main() { a := []int{2: 1} fmt.Println(a) } 正确答案是：C，正确率 52%。这道题相对简单，但依然有近一半的人答错了。 第 88 期题目和 87 期类似，但难度高一些，题目如下： package main func main() { var x = []int{4: 44, 55, 66, 1: 77, 88} println(len(x),</description>
    </item>
    
    <item>
      <title>发现 go version 的一个另类用法：你肯定想不到</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-version-detail/</link>
      <pubDate>Fri, 19 Mar 2021 17:50:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-version-detail/</guid>
      <description>大家好，我是站长 polarisxu。 对于 go version，大家应该不陌生。在很多入门教程，安装 Go 后，一般会建议执行 go version 看看是否安装成功；亦或遇到问题，别人会问你 Go 哪个版本，你也会通过 go version 命令查看。所以，go version 的一个作用是查看本地使用的 Go 版本。 但实际上，go version 还有其他用途，甚至可以说，输出本地 Go 版本号只是它功能的一个特例。先 go help version 看看： $ go help version usage: go version [-m] [-v] [file ...] Version</description>
    </item>
    
    <item>
      <title>map 和 switch 如何选？match 又是什么？</title>
      <link>https://polarisxu.studygolang.com/posts/go/choose-map-or-switch/</link>
      <pubDate>Wed, 17 Mar 2021 23:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/choose-map-or-switch/</guid>
      <description>大家好，我是站长 polarisxu。 看到标题别惊讶，虽然 map 和 switch 似乎没啥关系，但有些场景它们俩都可以用。 场景一：根据不同的错误码显示对应错误消息，比如 200 -&amp;gt; 正常。 场景二：根据不同状态显示对应的文案。这个场景很常见，比如数据库保存状态，用的 tinyint 类型，显示给用户的是文本，所以需要进行转换。 具体怎么选？我们看一下代码，怎么选择应该一目了然。 const ( UnPay = iota HadPay Delivery Finish ) var orderState = map[int]string{ UnPay: &amp;</description>
    </item>
    
  </channel>
</rss>
