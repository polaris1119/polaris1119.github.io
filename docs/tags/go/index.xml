<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/go/</link>
    <description>Recent content in Go on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Wed, 17 Mar 2021 23:00:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>map 和 switch 如何选？match 又是什么？</title>
      <link>https://polarisxu.studygolang.com/posts/go/choose-map-or-switch/</link>
      <pubDate>Wed, 17 Mar 2021 23:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/choose-map-or-switch/</guid>
      <description>大家好，我是站长 polarisxu。 看到标题别惊讶，虽然 map 和 switch 似乎没啥关系，但有些场景它们俩都可以用。 场景一：根据不同的错误码显示对应错误消息，比如 200 -&amp;gt; 正常。 场景二：根据不同状态显示对应的文案。这个场景很常见，比如数据库保存状态，用的 tinyint 类型，显示给用户的是文本，所以需要进行转换。 具体怎么选？我们看一下代码，怎么选择应该一目了然。 const ( UnPay = iota HadPay Delivery Finish ) var orderState = map[int]string{ UnPay: &amp;</description>
    </item>
    
    <item>
      <title>优化Go应用性能就是在浪费时间？</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/golang-slower/</link>
      <pubDate>Wed, 17 Mar 2021 20:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/golang-slower/</guid>
      <description>原文标题：Writing slower Go programs。作者认为应该优化可读性，而不是优化性能。你认可吗？一起看下该文。本文不代表 Go语言中文网 的观点。 什么？写更慢的 Go 程序？难道我们不应该关注如何让 Go 程序更快吗？ 实际不是的。为了性能而优化 Go 代码几乎肯定在浪费你的时间，原因有以下几点： 性能并不重要（Performance doesn&amp;rsquo;t matter）； Go 本身就够快； 可读性胜过速度； 以</description>
    </item>
    
    <item>
      <title>快一个月，Go1.16 才发现了比较严重的 Bug，但这个 Bug 有点 Low。。。</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.16.1-release/</link>
      <pubDate>Thu, 11 Mar 2021 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.16.1-release/</guid>
      <description>大家好，我是站长 polarisxu。 Go 1.16 是 2021 年 2 月 16 日发布的。新版本发布，大家一般会等等，坐等 1.16.1 发布。没想到快一个月了才等到。 和之前一样，小版本是修复 Bug，会同时发布两个版本，这次是 Go1.16.1 和 Go1.15.9。那具体什么 Bug 呢？ Bug 1：encoding/xml 包相关 这个 Bug 不是 1.16 引入的，而是之前版本就存在。所以，Go 1.15.9 也修复了该 Bug。 具体是：在通过 xml.NewTokenDecoder 获得一个 Decoder 指针时</description>
    </item>
    
    <item>
      <title>RedMonk 编程语言排行榜，说 Go 正走向衰退，你认可吗？</title>
      <link>https://polarisxu.studygolang.com/posts/go/language-rankings-1-21/</link>
      <pubDate>Wed, 10 Mar 2021 14:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/language-rankings-1-21/</guid>
      <description>大家好，我是站长 polarisxu。 2021 年 3 月 1 日，RedMonk 发布了 2021 年 1 月 编程语言排行榜（实际是 1 月 和 2 月的数据）。 先介绍下这个排名的依据。RedMonk 从 GitHub 和 Stack Overflow 中提取语言排名，并将它们合并为一个排名，试图反映代码（GitHub）和问答（Stack Overflow）的吸引力。这个想法并不是为了提供一个统计上有效的当前使用情况的表示，而是为了将语言的问答</description>
    </item>
    
    <item>
      <title>构建微服务的 10 大 Go 框架/库</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/top-10-framework-golang-library-to-build-microservice/</link>
      <pubDate>Tue, 02 Mar 2021 22:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/top-10-framework-golang-library-to-build-microservice/</guid>
      <description>现在，很多开源库都支持构建应用程序。我应该向你推荐一些库，它们可以帮助启动具有简单设计、干净代码和良好性能的项目。 01 CLI 命令(spf13/cobra) 你想要构建一些 CLI 命令吗？ Cobra 既是一个用于创建强大的现代 CLI 应用程序的库，也是一个用于生成应用程序和命令文件的程序。 我使用这个库来管理命令应用程序，执行运行程序，初始化配置，并启动 Rest API。 基于 cobra 的应用组织结构： ├──</description>
    </item>
    
    <item>
      <title>那些 Go 语言实现的语言现在发展怎么样了？</title>
      <link>https://polarisxu.studygolang.com/posts/go/programming-language-implemented-by-go/</link>
      <pubDate>Mon, 01 Mar 2021 18:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/programming-language-implemented-by-go/</guid>
      <description>大家好，我是站长 polarisxu。 Go 是一门通用编程语言，Go1.5 实现了自举，也就是说，Go 语言是用它自身实现的。经过十来年的发展，开源界使用 Go 语言实现的编程语言不少，那它们发展的怎么样？本文进行一下梳理。 01 Go+ 这是国内七牛老大许式伟主导的，对 Go 语言的扩展，专为数据科学领域打造。目标是取代 Python 在数据科学领域的位置。 项目地址：https://github.com</description>
    </item>
    
    <item>
      <title>Go 官方应该搞一个类似 Rustup 的管理工具</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-need-like-rustup-tool/</link>
      <pubDate>Thu, 25 Feb 2021 15:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-need-like-rustup-tool/</guid>
      <description>大家好，我是站长 polarisxu。 搭建开发环境复杂，会让很多新手抓狂。比如看到有人吐槽 Python 环境复杂，而搭建 PHP 环境，出现了很多一键安装包，像 lnmp 等。可见大家开始上手时，希望能够在环境上少一些折腾，别还没入门就劝退。 在早期，搭建 Go 语言开发环境，什么 GOROOT、GOPATH、GOBIN，很多新手一头雾水，经常稀里糊涂配置上了，写项目 go install 一下，找不到编译好的程序跑哪</description>
    </item>
    
    <item>
      <title>克制挺难的</title>
      <link>https://polarisxu.studygolang.com/posts/talk/restraint-is-hard/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/restraint-is-hard/</guid>
      <description>大家好，我是站长 polarisxu。 昨天文章谈了 chi 这个 Go 框架，Kade 留言说，以为 chi 不会用 go mod，没想到去年就用了，但它支持的方式是从 v4.1.2 调到了 v1.5.0，也就是说之前都没有 go.mod，v1.5.0 开始加上了 go.mod。当 Go1.16 发布后，有了 ratract，他立马将其他所有版本都撤回了。面对社区的反对意见，他强硬的说：我在这个项目花了几年时间，尽管许多人不同</description>
    </item>
    
    <item>
      <title>从 go-chi 框架撤回所有主版本聊 Go1.16 的新特性</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/go-chi-use-retract/</link>
      <pubDate>Tue, 23 Feb 2021 18:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/go-chi-use-retract/</guid>
      <description>大家好，我是站长 polarisxu。 在 Reddit 上看到一条消息： go-chi is retracting all major versions with go1.16 new retract directive. go.mod 的变更如下： 这利用了 Go 1.16 中 Module 的新特性。在这之前，先一起学习下该特性。 01 retract：撤回版本 也许不少人没有开发过自己的 Module（模块），但了解模块版本撤回还是有必要的，说不定哪天就能用到。因此建议你能够跟着本文操作一遍。 一般地，模块作者需要一种方法来指示不应该使用某个已发布</description>
    </item>
    
    <item>
      <title>Go1.17 快报：将移除 GOPATH</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-will-remove-gopath/</link>
      <pubDate>Fri, 19 Feb 2021 09:20:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-will-remove-gopath/</guid>
      <description>大家好，我是站长 polarisxu。 是的，没看错，Go 1.16 刚正式发布，但这里说的是 Go1.17 将会包含的改变（不出意外的话），我会出一系列文章介绍 Go1.17 的变化。 关于 Go 1.16 的变化。Reddit 上有一张图总结的挺好的： 相关的知识点，我之前也写过很好几篇文章，有兴趣的可以看看： Go 1.16 的这个新变化需要适应下：go get 和 go install 的变化 提前试用将在 Go1.16 中发布的内嵌静态资源功能 基于 Go1.16 实现静态文件的 HTTP</description>
    </item>
    
  </channel>
</rss>
