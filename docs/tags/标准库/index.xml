<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>标准库 on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <description>Recent content in 标准库 on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Mon, 08 Nov 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go1.18 快讯：新增的 Cut 函数太方便了</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-cut/</link>
      <pubDate>Mon, 08 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-cut/</guid>
      <description>大家好，我是 polarisxu。 在编程中，字符串使用是最频繁的。Go 语言对字符串相关的操作也提供了大量的 API，一方面，字符串可以向普通 slice 一样进行相关操作；另一方面，标准库专门提供了一个包 strings 进行字符串的操作。 01 strings.Index 系列函数 假如有一个这样的需求：从 192.168.1.1:8080 中获取 ip 和 port。 我们一般会这么实现： addr := &amp;#34;192.168.1.1:8080&amp;#34; pos := strings.Index(addr, &amp;#34;:&amp;#34;) if pos == -1 { panic(&amp;#34;非法地址&amp;#34;) } ip, port :=</description>
    </item>
    
    <item>
      <title>Go1.18 快讯：废弃了这个 API</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-title/</link>
      <pubDate>Sun, 07 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-title/</guid>
      <description>大家好，我是 polarisxu。 从 11 月 01 日起，Go1.18 就冻结了，也就是 1.18 的功能已经确定。 今天介绍一个 Go1.18 废弃的 API，同时介绍响应的替代 API。 01 strings.Title 被废弃 查看 go tip 标准库文档，发现 strings.Title 被标识为 deprecated：https://pkg.go.dev/strings@master ，而且该 API 的文档默认被折叠了。 pkg.go.dev 针对废弃的 API 使用了不一样的样式。 该 API 是干什么的？为</description>
    </item>
    
    <item>
      <title>Go1.18 快讯：新增字符串 Clone API</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-clone/</link>
      <pubDate>Tue, 02 Nov 2021 23:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-clone/</guid>
      <description>大家好，我是 polarisxu。 Go 1.18 虽然还有 4 个月发布，但大部分的功能基本确定。我们可以提前知晓、熟悉。 今天介绍的是标准库中新增的一个 API：strings.Clone()。 从名称可以知道，这是克隆。很多其他语言一开始就有这样的功能。比如 PHP 有 clone 关键字、__clone 魔术方法；Java 的根类 Object 有 clone 方法等。 01 函数签名 该函数的定义如下（见：https://pkg.</description>
    </item>
    
    <item>
      <title>Go：如何获得项目根目录？</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/go-std-cwd/</link>
      <pubDate>Sun, 31 Oct 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/go-std-cwd/</guid>
      <description>大家好，我是 polarisxu。 项目中，特别是 Web 项目，经常需要获得项目的根目录，进而可以访问到项目相关的其他资源，比如配置文件、静态资源文件、模板文件、数据文件、日志文件等（Go1.16 后，有些可以方便的通过 embed 内嵌进来）。比如下面的目录结构：（路径是 /Users/xuxinhua/stdcwd） ├── bin ├── cwd ├── main.go └── log ├── error.log 为了正确读取 error.</description>
    </item>
    
    <item>
      <title>Go1.17 快报之标准库越来越注重易用性</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/go1.17-std/</link>
      <pubDate>Tue, 22 Jun 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/go1.17-std/</guid>
      <description>大家好，我是 polarisxu。 说起 Go 的优点，很多人会提到 Go 拥有强大的标准库，比如开发一个 HTTP 服务，几行代码就搞定。不过，如果是一个 PHPer 转到 Go，又会觉得 Go 标准库不够便利，很多东西都需要自己二次封装。这其实是一个取舍的问题。 Go 官方也在不断完善、优化标准库，在坚持一定原则的基础上，尽可能让标准库好用、易用。今天就看看 Go1.17 中，官方在这方面做了哪些改进。 01 time 包 Unix 时间戳，</description>
    </item>
    
    <item>
      <title>怎么知道某个 API 是在哪个 Go 版本添加的？这个功能如何实现的</title>
      <link>https://polarisxu.studygolang.com/posts/go/how-realize-go-std-version-show/</link>
      <pubDate>Thu, 04 Feb 2021 15:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/how-realize-go-std-version-show/</guid>
      <description>大家好，我是站长 polarisxu。 因为 Go 的兼容性做的很好，很多人不太关心 Go 的具体版本。然而有时候可能会涉及到版本的问题，比如你想使用 strings.Builder，Go 版本就必须 &amp;gt;= 1.10，但以下代码在 Go1.10 却编译不通过。 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { var b strings.Builder b.WriteString(&amp;#34;polarisxu&amp;#34;) fmt.Println(b.Cap()) } 编译会报错： $ go version go version go1.10.8 darwin/amd64 $ go run main.go # command-line-arguments ./main.go:11:15: b.Cap undefined (type strings.Builder has no field or method Cap) 提示 strings.Builder 类型没有 Cap 字段或方法。 所以，你知道标准库中</description>
    </item>
    
    <item>
      <title>听说你还不知道如何查看 Go 历史文档？</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/view-go-history-std-version/</link>
      <pubDate>Thu, 17 Dec 2020 17:15:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/view-go-history-std-version/</guid>
      <description>大家好，我是站长 polarisxu。 这是一篇短文，写这篇文章主要是看到了两个信息： tonybai 写的《如何查看历史版本的 Go 文档？》 Go 官方发博文，2021 年初开始，godoc.org 默认将重定向到 pkg.go.dev ； tonybai 在文章中说了两种方法： 利用 go doc，可行，但非最优。比如 go doc http.Request。通过切换本地的 Go 版本实现查看不同版本的 Go 标准库文档； 使用 godoc 建立历史版本的 Web 化文档中心。</description>
    </item>
    
  </channel>
</rss>
