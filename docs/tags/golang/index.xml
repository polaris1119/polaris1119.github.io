<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/golang/</link>
    <description>Recent content in Golang on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Thu, 12 Nov 2020 18:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字节跳动面试真的也会问这样的问题？！</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/bytedance-interview-201112/</link>
      <pubDate>Thu, 12 Nov 2020 18:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/bytedance-interview-201112/</guid>
      <description>大家好，我是站长 polarisxu。 网上看到有人分享去字节跳动的面试 Go 的经验 ，从面试题来看，应该是比较初级的职位。 这份面试经验总结中（其实谈</description>
    </item>
    
    <item>
      <title>祝贺 Go 开源 11 周年</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go-opensource-11-years/</link>
      <pubDate>Tue, 10 Nov 2020 09:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go-opensource-11-years/</guid>
      <description>题图来自《了不起的程序员》 今天是 Go 语言开源 11 周年。有些人可能不太知道，简单回顾下 Go 的历史。 2007 年 Rob Pike, Robert Griesemer 和 Ken Thompson 一起创建了 Go 语言。从代码提交记录</description>
    </item>
    
    <item>
      <title>客观、全面的比较 Rust 与 Go</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/rust-vs-go/</link>
      <pubDate>Tue, 10 Nov 2020 00:07:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/rust-vs-go/</guid>
      <description>最近一年，将 Rust 和 Go 进行比较的不少，但不少都不公正，带感情色彩。而这篇文章客观、全面的分析对比了 Rust 和 Go，让你具体项目时选择最合适的。 Rust 还是 G</description>
    </item>
    
    <item>
      <title>闲聊昨晚极客时间的直播</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/talk-geek-time-live/</link>
      <pubDate>Mon, 26 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/talk-geek-time-live/</guid>
      <description>昨天晚上（10 月 25 日）极客时间进行了一场直播，主题是：《未来 5 年将是 Go 语言的天下》。 客观说，这个主题还是挺唬人的，而直播的内容跟这个主题关系</description>
    </item>
    
    <item>
      <title>一道关于 json 和 slice 的题难倒了 80% 的人</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/interview-slice-json/</link>
      <pubDate>Sun, 18 Oct 2020 14:18:50 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/interview-slice-json/</guid>
      <description>昨天在 Go语言爱好者周刊：第 65 期 刊首语发了一道题，以下代码输出什么？ package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type AutoGenerated struct { Age int `json:&amp;#34;age&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Child []int `json:&amp;#34;child&amp;#34;` } func main() { jsonStr1 := `{&amp;#34;age&amp;#34;: 14,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), &amp;amp;a) aa</description>
    </item>
    
    <item>
      <title>你喜欢的 Go 第三方库：一步为系统集成可视化实时运行时统计</title>
      <link>https://polarisxu.studygolang.com/posts/go/pkg/statsviz/</link>
      <pubDate>Thu, 15 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/pkg/statsviz/</guid>
      <description>大家好，我是站长 polarisxu。 掌握系统运行状态，知道系统哪些地方可能存在问题，方便进行优化，这是一个实际系统必备的。裸奔，对系统一无所</description>
    </item>
    
    <item>
      <title>Go Playground 还能这么玩？</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/usingg-gpgsync/</link>
      <pubDate>Fri, 09 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/usingg-gpgsync/</guid>
      <description>大家好，我是 polarisxu。 之前我为大家推荐过 Playground，对比了三款 Go Playground 。今天发现了另外一款 Playground，它最核心的特</description>
    </item>
    
    <item>
      <title>终于找到了一款我喜欢的安装和管理 Go 版本的工具</title>
      <link>https://polarisxu.studygolang.com/posts/go/project/go-version-manager/</link>
      <pubDate>Fri, 09 Oct 2020 18:12:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/project/go-version-manager/</guid>
      <description>一直以来，我都习惯通过源码安装 Go。我是这么做的： 1）Git clone Go 源码 $ git clone https://github.com/golang/go 2）需要安装什么版本就切换到对应的分支，比如安装 1.15.x $ git checkout -b release-branch.go1.15 origin/release-branch.go1.15 如</description>
    </item>
    
    <item>
      <title>题解：竟然半数以上的人做错了，基础真的很重要</title>
      <link>https://polarisxu.studygolang.com/posts/basic/complement/</link>
      <pubDate>Sat, 03 Oct 2020 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/basic/complement/</guid>
      <description>双节发布了两道题： 题一： package main func main() { var a int8 = -1 var b int8 = -128 / a println(b) } 题二： package main func main() { const a int8 = -1 var b int8 = -128 / a println(b) } 答对的人真不多（半数以上答错了），</description>
    </item>
    
    <item>
      <title>何时使用 Rust 和何时使用 Golang</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/when-to-use-rust-and-when-to-use-golang/</link>
      <pubDate>Wed, 30 Sep 2020 11:15:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/when-to-use-rust-and-when-to-use-golang/</guid>
      <description>Golang 和 Rust 之间有明显的区别。Golang 更加注重构建可以无限扩展的 Web API 和小型服务，尤其是在 goroutine 的强大支持下。Rust 也可以用于小型服务，但是从开发</description>
    </item>
    
  </channel>
</rss>
