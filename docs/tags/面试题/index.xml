<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试题 on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
    <description>Recent content in 面试题 on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Sun, 18 Oct 2020 14:18:50 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一道关于 json 和 slice 的题难倒了 80% 的人</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/interview-slice-json/</link>
      <pubDate>Sun, 18 Oct 2020 14:18:50 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/interview-slice-json/</guid>
      <description>昨天在 Go语言爱好者周刊：第 65 期 刊首语发了一道题，以下代码输出什么？ package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type AutoGenerated struct { Age int `json:&amp;#34;age&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` Child []int `json:&amp;#34;child&amp;#34;` } func main() { jsonStr1 := `{&amp;#34;age&amp;#34;: 14,&amp;#34;name&amp;#34;: &amp;#34;potter&amp;#34;, &amp;#34;child&amp;#34;:[1,2,3]}` a := AutoGenerated{} json.Unmarshal([]byte(jsonStr1), &amp;amp;a) aa</description>
    </item>
    
    <item>
      <title>这么一道“简单”的题，为什么结果出乎我的意料</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/interview-len-shift/</link>
      <pubDate>Sun, 27 Sep 2020 14:52:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/interview-len-shift/</guid>
      <description>今天在《Go语言爱好者周刊：第62期》 中贴了一道 Go101 的题，原题如下： package main const s = &amp;#34;Go101.org&amp;#34; // len(s) == 9 // 1 &amp;lt;&amp;lt; 9 == 512 // 512 / 128 == 4 var a byte = 1 &amp;lt;&amp;lt; len(s) / 128 var b byte = 1 &amp;lt;&amp;lt;</description>
    </item>
    
  </channel>
</rss>
