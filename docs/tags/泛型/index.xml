<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泛型 on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/%E6%B3%9B%E5%9E%8B/</link>
    <description>Recent content in 泛型 on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Sat, 27 Nov 2021 20:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/%E6%B3%9B%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go泛型系列：slices 包使用讲解</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-slices/</link>
      <pubDate>Sat, 27 Nov 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-slices/</guid>
      <description>大家好，我是 polarisxu。 前段时间，Russ Cox 明确了泛型相关的事情 ，原计划在标准库中加入泛型相关的包，改放到 golang.org/x/exp 下。 目前，Go 泛型的主要设计者 ianlancetaylor 完成了 slices 和 maps 包的开发，代码提交到了 golang.org/x/exp 中，如果经过使用、讨论等，社区认可后，预计在 1.19 中会合入标准库中。 今天，通过学习 slices 包，掌握 Go 泛型的使用方法。 01 为什么增加 slices 包 标准库有 bytes 和 strings 包，分别用来处理 []byte 和 string 类型，提供了众多方</description>
    </item>
    
    <item>
      <title>Go泛型系列：Go1.18 类型约束那些事</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-constraints/</link>
      <pubDate>Sun, 14 Nov 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-constraints/</guid>
      <description>大家好，我是 polarisxu。 上篇《Go泛型系列：提前掌握Go泛型的基本使用》 简单讲解了泛型中的约束，但约束相关内容远不止那些，本文介绍更多约束相关内容。 请安装最新的 tip 版本，方便验证本文的内容。当然，也可以通过 https://gotipplay.golang.org/ 在线验证。 01 语法变更 上次提到，定义约束的语法类似这样： type Addable interface { type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, float32, float64, complex64, complex128, string } 不过目前已经确认，语法改成如下形式： type Addable interface { int |</description>
    </item>
    
    <item>
      <title>Go泛型系列：提前掌握Go泛型的基本使用</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-basic/</link>
      <pubDate>Tue, 28 Sep 2021 23:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-basic/</guid>
      <description>泛型，是 Go 语言多年来最令人兴奋和根本性的变化之一。没有泛型，很多人以此「鄙视」Go 语言。当然，也有人觉得根本不需要泛型。有泛型，不代表你一定要用。平心而论，有些场景下，泛型还是很有必要和帮助的。 现在已经确认，Go1.18 正式包含泛型（Go1.17 已经可以试用，只是默认不支持，见之前的文章：扬眉吐气：刚刚，Go 已经默认支持泛型了 ）。 不过，不少人对泛型还是迷迷糊</description>
    </item>
    
    <item>
      <title>扬眉吐气：刚刚，Go 已经默认支持泛型了</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go-generic/</link>
      <pubDate>Sun, 22 Aug 2021 22:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go-generic/</guid>
      <description>大家好，我是 polarisxu。 上周 Go 1.17 发布，在发布文档中，没有提到泛型的事情。但在发布之前，大家就发现，泛型的相关代码在 1.17 中埋下了，只是默认不启用。 就在最近，gotip 已经默认启用泛型。Go 泛型官方叫做：type parameters。 -G 的默认值由 0 改为了 3，那 Go 1.17 有没有这个 flag？ 01 Go1.17 启用泛型支持 安装 Go1.17，推荐使用类似 goup 这样的工具，方便切换版本，</description>
    </item>
    
    <item>
      <title>GoLand 2020.3 正式发布了，有不少新功能，包括支持泛型</title>
      <link>https://polarisxu.studygolang.com/posts/devtool/goland/goland-2020-3-release/</link>
      <pubDate>Fri, 04 Dec 2020 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/devtool/goland/goland-2020-3-release/</guid>
      <description>这是 2020 年第 3 个版本，也是最后一个版本。在 GoLand 2020.3 中，您可以探索 goroutines dumps，运行并导航到单个表测试（table tests），并从对 Testify 测试框架的扩展支持中获得更多信息。你还将发现许多新的代码编辑功能，包括对 time 包的支持，更智能的处理包方法，UI 改进，用于 Web 开发和使用数据库的各种新功能以及用于协作开发和结对编程的新服务。具体看看有哪些新特性。 01 调试器改进 Dump Goroutines 调试器中新</description>
    </item>
    
    <item>
      <title>关于 Go 语言泛型设计的最新进展和一些问题的说明</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/about-go-generic-progress/</link>
      <pubDate>Sun, 23 Aug 2020 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/about-go-generic-progress/</guid>
      <description>前段时间 Go 官方发布了新的泛型草案，一时间在社区引起了很大的反响，各种关于泛型的文章、讨论涌现出来。8 月 21日 Ian Lance Taylor 在 golang-nuts 讨论组总结了泛型设计的最新进展和一些问题的说明。 Go Team 在经过多次讨论并阅读了许多评论后，计划对泛型设计进行一些更改并澄清草案的一些问题。 1 泛型语法极有可能使用方括号 []（不用 &amp;lt;&amp;gt; 是因为和比较运算符大于、小于冲突，为了保持 Go1 兼容性，所以选择了 []）</description>
    </item>
    
    <item>
      <title>GoLand 2020.2 Beta 版发布：go.mod 升级以及对泛型的实验性支持</title>
      <link>https://polarisxu.studygolang.com/posts/devtool/goland/2020.2.beta/</link>
      <pubDate>Thu, 16 Jul 2020 14:17:51 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/devtool/goland/2020.2.beta/</guid>
      <description>GoLand 2020.2 达到 Beta。这意味着我们将结束一连串的新功能开发，将重点转移到完善我们已经完成的工作上，并开始计算发布日之前的日子！
与我们的“抢先体验计划”版本相比，该测试版非常稳定，但请记住，可能仍然在某处存在 Bug。
同样请注意，此 Beta 版本是 EAP 周期中的最后一个版本，不需要订阅即可使用（如果您只是想尝试 GoLand，请尝试）。测试版通常会在发布候选版本之后出现，一旦我们发现该版本足够好并且可以在您的计算机上安装了。
在此发布周期中，我们为即将推出的 GoLand 2020.2 打包了 Go 模块的新功能，更好地呈现了代码中可能存在的问题和薄弱环节，提供了新的代码检查功能以及新的代码编辑功能，例如期待已久的 “Add Caret Per Selected Line”，改进了后台流程，使其更透明，更快，更多！
让我们来看看即将发布的版本中的新功能。选择您感兴趣的主题，或浏览整个博客文章以了解每个新功能。
 Go Modules Generics a.k.a. Type Parameters Code Editing Code Inspections Take Variadic Arguments Under Сontrol References from Comments Save Projects as Templates Under the Hood Processes Version Control  Go Modules 支持 GOMODCACHE 环境变量 从 Go 1.15 开始，可以使用新的 GOMODCACHE 环境变量将 Go Modules 缓存的默认位置从 $GOPATH/pkg/mod 更改为另一个文件夹。
为此，只需在 “Preferences/Settings | Go Modules | Environment” 设置 GOMODCACHE 即可。
IDE 将识别自定义位置，并将其用于具有依赖关系的所有后续操作。同步依赖项快速修复程序（可通过 Alt + Enter 实现）会将依赖项下载到 GOMODCACHE，外部库也将在新的自定义位置显示依赖项。
升级 go.mod 文件 行注释（在 Windows/Linux 上为 Ctrl + /，在 macOS 上为 ⌘ + /）可用于 go.mod 文件。
现在，当您键入 replace，exclude 和 require 语句的左括号时，GoLang 立即自动为你添加右括号。
泛型（又称类型参数） 6月16日，Go Team 宣布了泛型（也称为类型参数）设计草案。请访问 Golang 文档以获取有关该概念的完整详细信息 。
这是一个重大的发展，因此我们立即着手增加对它的支持。GoLand 2020.2 Beta 提供了对泛型的实验性支持，您可以通过在 Settings/Preferences | Go 启用对泛型的实验性支持。
此初始支持提供语法高亮显示和基本参考解析，并且仅在 go2 文件中有效。
请注意，有关泛型的工作仍在进行中，我们目前尚无法提供全面的支持。
尽管如此，请分享您的体验和您可能有的任何建议。它确实可以帮助我们完善到目前为止已完成的工作，因此我们可以使其可靠并使用更高级的功能进行填充。
代码编辑 想要将快速修复的结果应用于代码之前预览其结果，请使用 Alt + Enter 快捷方式调用显示上下文操作，选择所需的快速修复，然后在 macOS 上按 Alt + Space 或在 Windows 和 Linux 上为 Ctrl + Shift + I。
新的“按选定的行添加插入（多行操作）”操作会在每个选定行的末尾插入，并取消选择这些行。在 Windows/Linux 上使用快捷键 Alt + Shift + G 或在 macOS 上使用 ⌥ + ⇧ + G 调用它。
在 Preferences/Settings | Editor | Code Style | Go | Wrapping and Braces 中为调用参数，函数参数和复合文字元素配置换行。或者，您可以使用 Alt + Enter 键，调出 Put arguments on separate lines 和 *Put arguments on one line，*以手动拆分和合并元素。</description>
    </item>
    
  </channel>
</rss>
