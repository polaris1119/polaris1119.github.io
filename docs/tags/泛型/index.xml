<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泛型 on polarisxu</title>
    <link>https://polarisxu.studygolang.com/tags/%E6%B3%9B%E5%9E%8B/</link>
    <description>Recent content in 泛型 on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Thu, 03 Feb 2022 22:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/tags/%E6%B3%9B%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>跟着 Go 作者学泛型</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/gophercon2021-generics/</link>
      <pubDate>Thu, 03 Feb 2022 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/gophercon2021-generics/</guid>
      <description>大家好，我是 polarisxu。 在 GopherCon 2021 年大会上，Go 两位作者 Robert Griesemer 和 Ian Lance Taylor 做了泛型相关的演讲，即将在 Go1.18 发布的 Go 泛型，正是两位设计的。一直想着把他们的演讲做一个梳理，然后分享给大家。拖的有点久，趁春节假期整理出来了。 注意，本文中的 constraints 包，已经确定在 Go1.18 正式版中去除，放入 golang.org/x/exp 中。详细可以参考该文：Go1.18 这个包确定没了 。 Go1.18 关于泛型部分，主要有三个特性： Type parameters for functions and ty</description>
    </item>
    
    <item>
      <title>Go 泛型入门教程</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-tutorial/</link>
      <pubDate>Sun, 19 Dec 2021 16:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-tutorial/</guid>
      <description>大家好，我是 polarisxu。 有泛型的 Go 版本 1.18 已经发布了 Beta1 版本，之前陆陆续续介绍了泛型，但可能有些人还是对 Go 泛型没有完整的了解，因此有这份入门教程。 01 准备工作 开始学习泛型之前，你应该安装 Go1.18 Beta1 或之后发布的版本，建议使用 goup 等版本管理工具 ，当然也可以直接通过 playground 来验证：https://go.dev/play/?v=gotip。 不过，本教程基于本地安装 Go1.18 Beta1 为例进行。</description>
    </item>
    
    <item>
      <title>Go泛型系列：maps 包讲解</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-maps/</link>
      <pubDate>Sun, 05 Dec 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-maps/</guid>
      <description>大家好，我是 polarisxu。 之前文章介绍了 slices 包 ，本文介绍另一个包，用于 map 相关操作，目前同样放在 golang.org/x/exp 包下。 https://github.com/golang/exp/blob/master/maps/maps.go 01 真实的场景 不少新手，对 map 的输出是随机的有迷惑，曾经，map 的输出顺序是固定的，但官方怕大家依赖这个顺序，之后故意让输出顺序不固定。 但实际场景中，会有按某种顺序输出 map 的需求，怎么办呢？这需要对 map 的 key 进行排序，伪代码如下： for k := m { keys = append(keys, k) } sort(keys) 类似的代码</description>
    </item>
    
    <item>
      <title>Go 1.18 中的 any 是什么？</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-any/</link>
      <pubDate>Thu, 02 Dec 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.18-any/</guid>
      <description>大家好，我是 polarisxu。 Go 1.18 因为泛型引入 any，这实际上是 interface{} 的别名： type any = interface{} 以下代码虽然不是泛型，但用 Go 1.18 可以正常运行，证明 any 和 interface{} 是一样的：（这里可以在线运行：https://gotipplay.golang.org/p/dPeNhe-7nkA） package main import ( &amp;#34;fmt&amp;#34; ) // 这里的 any 并非泛型的约束，而是类型 func test(x any) any { return x } func main() { fmt.Println(test(&amp;#34;a&amp;#34;)) } 泛型中，any 换为 interface{} 也可以：（这里</description>
    </item>
    
    <item>
      <title>Go泛型系列：slices 包讲解</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-slices/</link>
      <pubDate>Sat, 27 Nov 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-slices/</guid>
      <description>大家好，我是 polarisxu。 前段时间，Russ Cox 明确了泛型相关的事情 ，原计划在标准库中加入泛型相关的包，改放到 golang.org/x/exp 下。 目前，Go 泛型的主要设计者 ianlancetaylor 完成了 slices 和 maps 包的开发，代码提交到了 golang.org/x/exp 中，如果经过使用、讨论等，社区认可后，预计在 1.19 中会合入标准库中。 今天，通过学习 slices 包，掌握 Go 泛型的使用方法。 01 为什么增加 slices 包 标准库有 bytes 和 strings 包，分别用来处理 []byte 和 string 类型，提供了众多方</description>
    </item>
    
    <item>
      <title>Go泛型系列：Go1.18 类型约束那些事</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-constraints/</link>
      <pubDate>Sun, 14 Nov 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-constraints/</guid>
      <description>大家好，我是 polarisxu。 上篇《Go泛型系列：提前掌握Go泛型的基本使用》 简单讲解了泛型中的约束，但约束相关内容远不止那些，本文介绍更多约束相关内容。 请安装最新的 tip 版本，方便验证本文的内容。当然，也可以通过 https://gotipplay.golang.org/ 在线验证。 01 语法变更 上次提到，定义约束的语法类似这样： type Addable interface { type int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64, uintptr, float32, float64, complex64, complex128, string } 不过目前已经确认，语法改成如下形式： type Addable interface { int |</description>
    </item>
    
    <item>
      <title>Go泛型系列：提前掌握Go泛型的基本使用</title>
      <link>https://polarisxu.studygolang.com/posts/go/generics/generics-basic/</link>
      <pubDate>Tue, 28 Sep 2021 23:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/generics/generics-basic/</guid>
      <description>泛型，是 Go 语言多年来最令人兴奋和根本性的变化之一。没有泛型，很多人以此「鄙视」Go 语言。当然，也有人觉得根本不需要泛型。有泛型，不代表你一定要用。平心而论，有些场景下，泛型还是很有必要和帮助的。 现在已经确认，Go1.18 正式包含泛型（Go1.17 已经可以试用，只是默认不支持，见之前的文章：扬眉吐气：刚刚，Go 已经默认支持泛型了 ）。 不过，不少人对泛型还是迷迷糊</description>
    </item>
    
    <item>
      <title>扬眉吐气：刚刚，Go 已经默认支持泛型了</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go-generic/</link>
      <pubDate>Sun, 22 Aug 2021 22:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go-generic/</guid>
      <description>大家好，我是 polarisxu。 上周 Go 1.17 发布，在发布文档中，没有提到泛型的事情。但在发布之前，大家就发现，泛型的相关代码在 1.17 中埋下了，只是默认不启用。 就在最近，gotip 已经默认启用泛型。Go 泛型官方叫做：type parameters。 -G 的默认值由 0 改为了 3，那 Go 1.17 有没有这个 flag？ 01 Go1.17 启用泛型支持 安装 Go1.17，推荐使用类似 goup 这样的工具，方便切换版本，</description>
    </item>
    
    <item>
      <title>GoLand 2020.3 正式发布了，有不少新功能，包括支持泛型</title>
      <link>https://polarisxu.studygolang.com/posts/devtool/goland/goland-2020-3-release/</link>
      <pubDate>Fri, 04 Dec 2020 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/devtool/goland/goland-2020-3-release/</guid>
      <description>这是 2020 年第 3 个版本，也是最后一个版本。在 GoLand 2020.3 中，您可以探索 goroutines dumps，运行并导航到单个表测试（table tests），并从对 Testify 测试框架的扩展支持中获得更多信息。你还将发现许多新的代码编辑功能，包括对 time 包的支持，更智能的处理包方法，UI 改进，用于 Web 开发和使用数据库的各种新功能以及用于协作开发和结对编程的新服务。具体看看有哪些新特性。 01 调试器改进 Dump Goroutines 调试器中新</description>
    </item>
    
    <item>
      <title>关于 Go 语言泛型设计的最新进展和一些问题的说明</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/about-go-generic-progress/</link>
      <pubDate>Sun, 23 Aug 2020 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/about-go-generic-progress/</guid>
      <description>前段时间 Go 官方发布了新的泛型草案，一时间在社区引起了很大的反响，各种关于泛型的文章、讨论涌现出来。8 月 21日 Ian Lance Taylor 在 golang-nuts 讨论组总结了泛型设计的最新进展和一些问题的说明。 Go Team 在经过多次讨论并阅读了许多评论后，计划对泛型设计进行一些更改并澄清草案的一些问题。 1 泛型语法极有可能使用方括号 []（不用 &amp;lt;&amp;gt; 是因为和比较运算符大于、小于冲突，为了保持 Go1 兼容性，所以选择了 []）</description>
    </item>
    
  </channel>
</rss>
