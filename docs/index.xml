<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polarisxu</title>
    <link>https://polarisxu.studygolang.com/</link>
    <description>Recent content on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Tue, 30 Mar 2021 12:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go周刊题解：切片的另类初始化 — 该题正确率出奇的低</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/weekly-question-88/</link>
      <pubDate>Tue, 30 Mar 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/weekly-question-88/</guid>
      <description>大家好，我是站长 polarisxu。 我在 Go 语言爱好者周刊第 87 和 88 期 刊首出了两道题，这两道题有点类似，都是和切片初始化有关。但这两道的题正确率比较低，特别是 88 期的题。 第 87 期题目如下： package main import ( &amp;#34;fmt&amp;#34; ) func main() { a := []int{2: 1} fmt.Println(a) } 正确答案是：C，正确率 52%。这道题相对简单，但依然有近一半的人答错了。 ![image-20210329195215876](/Users/xuxinhua/Library/Application Support/typora-user-images/image-20210329195215876.png) 第 88 期题目和 87 期类似，但难度高一些，题目如下： package main func main() { var x = []int{4: 44, 55, 66, 1: 77,</description>
    </item>
    
    <item>
      <title>GoLand 也可以远程开发了：试用报告</title>
      <link>https://polarisxu.studygolang.com/posts/devtool/goland/goland-remote-projector/</link>
      <pubDate>Sat, 27 Mar 2021 15:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/devtool/goland/goland-remote-projector/</guid>
      <description>大家好，我是站长 polarisxu。 JetBrains 官方今天发了一篇文章：《使用 Projector 远程访问 IDE》 ，了解到 JetBrains 搞了一个远程开发 IDE。很多人知道 VSCode 可以进行远程开发，现在 JetBrains 系列 IDE 也支持了（自然 GoLand 也支持），于是安装试用了下，给大家做一个汇报。 01 Projector 是什么 Projector 是一种远程运行和访问 Swing GUI 应用程序的技术（Swing 是 Java 的 GUI API，JetBrains 系列 IDE 都是使用 Swing 绘制的 UI），目前 1.0 版本可</description>
    </item>
    
    <item>
      <title>送 gRPC 书后续：自我反思和人性的思考</title>
      <link>https://polarisxu.studygolang.com/posts/talk/double-win-after-grpc/</link>
      <pubDate>Thu, 25 Mar 2021 11:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/double-win-after-grpc/</guid>
      <description>大家好，我是站长 polarisxu。 上周在公众号搞了一个送书活动 ，感谢大家的参与，留言数 170+，而微信公众号最多只能放出来 100 个留言，因此有些晚留言的，可能留言没放出来，下次再有活动，大家可以早点参与，我公众号发文时间一般是 18:12。 根据文中的相关规则，第二天就开奖了，中奖的用户一一留言回复了，他们的书也已经收到了。 不过陆续还有人问：这个开奖了吗？据说还有</description>
    </item>
    
    <item>
      <title>阿里云盘公测随想：如何看待竞争</title>
      <link>https://polarisxu.studygolang.com/posts/talk/competition-aliyundriver/</link>
      <pubDate>Mon, 22 Mar 2021 18:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/competition-aliyundriver/</guid>
      <description>大家好，我是站长 polarisxu。 昨天（2021 年 3 月 22 日）阿里云盘公测，声称下载速度 50-100 M/s，网友测试，5G 下确实能达到。而且官方表示，“无论免费收费，未来都不限速”。 朋友圈有人发了这么一段话： 阿里云盘今天公测，下载速度 50-100 MB/s，官方表示：“无论免费收费，未来都不限速” 百度网盘目前用户数已超 7 亿，阿里云盘目前用户数不足千万 阿里云平台目前有 2800+ 的 CDN 节点，全</description>
    </item>
    
    <item>
      <title>发现 go version 的一个另类用法：你肯定想不到</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-version-detail/</link>
      <pubDate>Fri, 19 Mar 2021 17:50:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-version-detail/</guid>
      <description>大家好，我是站长 polarisxu。 对于 go version，大家应该不陌生。在很多入门教程，安装 Go 后，一般会建议执行 go version 看看是否安装成功；亦或遇到问题，别人会问你 Go 哪个版本，你也会通过 go version 命令查看。所以，go version 的一个作用是查看本地使用的 Go 版本。 但实际上，go version 还有其他用途，甚至可以说，输出本地 Go 版本号只是它功能的一个特例。先 go help version 看看： $ go help version usage: go version [-m] [-v] [file ...] Version</description>
    </item>
    
    <item>
      <title>map 和 switch 如何选？match 又是什么？</title>
      <link>https://polarisxu.studygolang.com/posts/go/choose-map-or-switch/</link>
      <pubDate>Wed, 17 Mar 2021 23:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/choose-map-or-switch/</guid>
      <description>大家好，我是站长 polarisxu。 看到标题别惊讶，虽然 map 和 switch 似乎没啥关系，但有些场景它们俩都可以用。 场景一：根据不同的错误码显示对应错误消息，比如 200 -&amp;gt; 正常。 场景二：根据不同状态显示对应的文案。这个场景很常见，比如数据库保存状态，用的 tinyint 类型，显示给用户的是文本，所以需要进行转换。 具体怎么选？我们看一下代码，怎么选择应该一目了然。 const ( UnPay = iota HadPay Delivery Finish ) var orderState = map[int]string{ UnPay: &amp;</description>
    </item>
    
    <item>
      <title>优化Go应用性能就是在浪费时间？</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/golang-slower/</link>
      <pubDate>Wed, 17 Mar 2021 20:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/golang-slower/</guid>
      <description>原文标题：Writing slower Go programs。作者认为应该优化可读性，而不是优化性能。你认可吗？一起看下该文。本文不代表 Go语言中文网 的观点。 什么？写更慢的 Go 程序？难道我们不应该关注如何让 Go 程序更快吗？ 实际不是的。为了性能而优化 Go 代码几乎肯定在浪费你的时间，原因有以下几点： 性能并不重要（Performance doesn&amp;rsquo;t matter）； Go 本身就够快； 可读性胜过速度； 以</description>
    </item>
    
    <item>
      <title>周末看完这本 gRPC 的书后，我决定送 10 本给读者</title>
      <link>https://polarisxu.studygolang.com/posts/grpc/grpc-cncf-with-go-and-java/</link>
      <pubDate>Tue, 16 Mar 2021 10:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/grpc/grpc-cncf-with-go-and-java/</guid>
      <description>大家好，我是站长 polarisxu。 牛年春晚，Go语言中文网组织的活动，送了 10 本 《gRPC与云原生应用开发：以Go和Java为例》。上周末，我翻了下这本书，决定对该书做一个介绍，同时再送 10 本给我的读者。 01 gRPC 是什么？ 这是一本关于 gRPC 的书，所以简单介绍下 gRPC 是什么，相信很多人不陌生。 2015 年 2 月 26 日，谷歌宣布开源 gRPC，并称其「基于公司多年的分布式系统构建经验」。因为</description>
    </item>
    
    <item>
      <title>微信 Mac 版 3.0 支持浏览朋友圈：划水更方便了</title>
      <link>https://polarisxu.studygolang.com/posts/wechat/mac-wechat-3.0/</link>
      <pubDate>Fri, 12 Mar 2021 00:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/wechat/mac-wechat-3.0/</guid>
      <description>大家好，我是站长 polarisxu。 有些人应该已经知晓，微信流出了 Mac 的 3.0 Beta 版本。为什么说流出呢？因为微信官网并没有提供下载。访问：https://mac.weixin.qq.com/，发现测试版本还是 2.6.1。 01 简单介绍下 3.0 版本的新功能。 Mac 的 3.0 版本安装后会显示一个弹窗，可以看到更新信息： 其中第一条就是：可以浏览朋友圈。在主窗口的左侧有一个朋友圈入口，如下图</description>
    </item>
    
    <item>
      <title>快一个月，Go1.16 才发现了比较严重的 Bug，但这个 Bug 有点 Low。。。</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.16.1-release/</link>
      <pubDate>Thu, 11 Mar 2021 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.16.1-release/</guid>
      <description>大家好，我是站长 polarisxu。 Go 1.16 是 2021 年 2 月 16 日发布的。新版本发布，大家一般会等等，坐等 1.16.1 发布。没想到快一个月了才等到。 和之前一样，小版本是修复 Bug，会同时发布两个版本，这次是 Go1.16.1 和 Go1.15.9。那具体什么 Bug 呢？ Bug 1：encoding/xml 包相关 这个 Bug 不是 1.16 引入的，而是之前版本就存在。所以，Go 1.15.9 也修复了该 Bug。 具体是：在通过 xml.NewTokenDecoder 获得一个 Decoder 指针时</description>
    </item>
    
  </channel>
</rss>
