<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polarisxu</title>
    <link>https://polarisxu.studygolang.com/</link>
    <description>Recent content on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Thu, 31 Dec 2020 16:40:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2020 年终总结：希望对你有所帮助</title>
      <link>https://polarisxu.studygolang.com/posts/talk/2020-summary/</link>
      <pubDate>Thu, 31 Dec 2020 16:40:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/2020-summary/</guid>
      <description>大家好，我是站长 polarisxu。 第一次正式写年终总结，也许是一个好的开始，希望以后年年写。 可能每个年终总结都会感慨，2020 年是不平凡的一年，疫情持续了一年，原以为好些了，最近似乎有变严重了。大家多保重。口罩戴了一年，不知道什么时候才能去掉，希望这天早点到来。 年终总结，是对我自己的一个回顾，但发出来，我希望能够对大家有点帮助或启发。 这份总结主要会聊五个方</description>
    </item>
    
    <item>
      <title>Go 1.16 的这个新变化需要适应下：go get 和 go install 的变化</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go-get-install/</link>
      <pubDate>Sun, 27 Dec 2020 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go-get-install/</guid>
      <description>大家好，我是站长 polarisxu。 一直以来，我们通常都是通过 go get 来下载并安装包的。但从 Go 1.16 起，不推荐通过 go get 来安装包（主要是说安装可执行文件），也就是说，go get 应该只是用来下载包，而且将来版本可能会给该命令始终加上 -d 标志。 你可能会问，这对我使用有什么影响呢？ 让我们看一个实际的例子。 01 安装 Delve 的例子 我们在本地通过源码安装 Go 的调试器 Delve，可以这么做： $ go get</description>
    </item>
    
    <item>
      <title>详解 Go 中的环境变量</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/environment-variables-in-golang/</link>
      <pubDate>Sat, 26 Dec 2020 10:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/environment-variables-in-golang/</guid>
      <description>了解环境变量以及在 Golang 应用程序中使用它们的不同方法。 开始之前 本教程假定你具有： 对 Go 语言的基本了解 系统上安装了最新 Golang 版本 几分钟的时间 在本文中，我们将了解环境变量以及为什么要使用它们。并且将使用内置和第三方包在 Go 应用程序中访问它们。 什么是环境变量？ 环境变量是系统级的键-值对，正在运行的进程可以访问它。这些通常用于使同一程序在不同的部署环境（例如 PROD， DEV 或 TES</description>
    </item>
    
    <item>
      <title>这道题竟然只有 12% 的人答对。。。</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/weekly-question-embed-time/</link>
      <pubDate>Mon, 21 Dec 2020 16:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/weekly-question-embed-time/</guid>
      <description>这题是有点坑，但很多人对结果还是不知所以。</description>
    </item>
    
    <item>
      <title>感慨 Apple 的 强大</title>
      <link>https://polarisxu.studygolang.com/posts/apple/is-apple-m1-ready/</link>
      <pubDate>Sat, 19 Dec 2020 15:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/apple/is-apple-m1-ready/</guid>
      <description>大家好，我是站长 polarisxu。 这段时间关注 Apple M1 芯片挺多的，对 Apple 的强大由衷的感慨。市值 2.1 万亿美金，做的动作都成为行业引领者。 当年扁平化设计出来，被各种吐槽；结果大家都扁平化了； 出暗黑模式（很程序员？），有些人不喜欢，但现在各种都支持暗黑模式； iPhone 12 不带耳机和充电器，骂声一片，目测各个手机厂商都跟进，比如三星就宣布不带了； Mac 换成自己的 M1 芯片，很多软件厂商及时</description>
    </item>
    
    <item>
      <title>听说你还不知道如何查看 Go 历史文档？</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/view-go-history-std-version/</link>
      <pubDate>Thu, 17 Dec 2020 17:15:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/view-go-history-std-version/</guid>
      <description>大家好，我是站长 polarisxu。 这是一篇短文，写这篇文章主要是看到了两个信息： tonybai 写的《如何查看历史版本的 Go 文档？》 Go 官方发博文，2021 年初开始，godoc.org 默认将重定向到 pkg.go.dev ； tonybai 在文章中说了两种方法： 利用 go doc，可行，但非最优。比如 go doc http.Request。通过切换本地的 Go 版本实现查看不同版本的 Go 标准库文档； 使用 godoc 建立历史版本的 Web 化文档中心。</description>
    </item>
    
    <item>
      <title>新买了 Apple M1 Mac，却不知道如何安装 Go？</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/apple-m1-install-go/</link>
      <pubDate>Wed, 16 Dec 2020 20:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/apple-m1-install-go/</guid>
      <description>大家好，我是站长 polarisxu。 前些天有一位朋友问我： 有些朋友可能会有点奇怪，M1 有什么特别的吗？为了照顾部分童鞋，这里简单介绍下。 01 为什么会出现这个问题 大家知道不同的操作系统是很不一样的，同时不同的 CPU 架构也是很不一样的。Go 号称是跨平台的，自然要支持这些操作系统和 CPU 架构。 在 Go 中，GOOS 表示操作系统，GOARCH 表示 CPU 架构。比如你的 Linux 服务器，一般是 GO</description>
    </item>
    
    <item>
      <title>你是不是没想过，结构体竟然可以内嵌一个接口？</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/weekly-question-analysis-embed-interface/</link>
      <pubDate>Mon, 14 Dec 2020 17:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/weekly-question-analysis-embed-interface/</guid>
      <description>大家好，我是站长 polarisxu。 时不时有人催问周刊题目的解析，那就先先解析下第 71 期 的题目。 01 题目是，以下代码能否通过编译： package main import ( &amp;#34;fmt&amp;#34; ) type worker interface { work() } type person struct { name string worker } func main() { var w worker = person{} fmt.Println(w) } 这是大家的投票结果： 只有 35% 的人答对了。 这里答错的原因在于 worker 是一个接口，如果是一个普通的类型，相信大家会答对。一个结构体竟然可以嵌入一个接口？！ 02 我们都知晓 Go 没有继承，但可以通</description>
    </item>
    
    <item>
      <title>体验下“世界上最好的语言”新版本的特性</title>
      <link>https://polarisxu.studygolang.com/posts/php/php8-intro/</link>
      <pubDate>Tue, 08 Dec 2020 11:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/php/php8-intro/</guid>
      <description>大家好，我是站长 polarisxu。 看到标题，大家应该知晓今天聊的主角是谁。是的，它就是 PHP。 PHP 曾经很辉煌，现在怎么样？不做过多评价，前几天好未来不刚组织了一届 PHP 大会吗？！正因为曾经很辉煌，很多现在的 Go 爱好者曾经都是 PHPer，应该还有不少还在用着 PHP。我觉得完全没必要非得贬低一门语言去抬高另外一门语言，自己喜欢就好。而且掌握多门语言是自己的优势。 为什么</description>
    </item>
    
    <item>
      <title>推荐一个网站：其实是三个网站</title>
      <link>https://polarisxu.studygolang.com/posts/share/programming-idioms/</link>
      <pubDate>Mon, 07 Dec 2020 18:12:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/share/programming-idioms/</guid>
      <description>大家好，我是站长 polarisxu。 现在这样的环境要求我们程序员掌握多门语言。然而，很多人在掌握了一门语言后，学习其他语言时，总会有前一门语言的影子；亦或有些人希望在学习新语言时能和之前的语言进行对比学习。 无意中发现一个网站，对有上述情况的人可能有些帮助，因此推荐给大家。网站地址：https://programming-idioms.org/。 从网站名称也能</description>
    </item>
    
  </channel>
</rss>
