<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polarisxu</title>
    <link>https://polarisxu.studygolang.com/</link>
    <description>Recent content on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Wed, 03 Mar 2021 11:00:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>妹子你是认真的吗？.sh 文件只能在 Shanghai 机器跑</title>
      <link>https://polarisxu.studygolang.com/posts/talk/sh-is-shanghai/</link>
      <pubDate>Wed, 03 Mar 2021 11:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/sh-is-shanghai/</guid>
      <description>大家好，我是 polarisxu。 看到这样一条消息： 妹子你太有才了，想象力一流呀~网友纷纷评论：今日最佳。 基于此，网友没脑洞大开，说出来只有程序员才能听懂的“段子”： 压缩一下可以放在广州或兰州跑； .bat 文件大概率是 BAT 出身的程序员写的吧；亦或是只有 BAT 公司才能用？ 如果 .py 文件该作何解释？ .php 文件呢？ .rb 果然是日本人发明的，只能在日本才能打开； 。。。 当然，也有人说妹子就是故意</description>
    </item>
    
    <item>
      <title>构建微服务的 10 大 Go 框架/库</title>
      <link>https://polarisxu.studygolang.com/posts/go/translation/top-10-framework-golang-library-to-build-microservice/</link>
      <pubDate>Tue, 02 Mar 2021 22:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/translation/top-10-framework-golang-library-to-build-microservice/</guid>
      <description>现在，很多开源库都支持构建应用程序。我应该向你推荐一些库，它们可以帮助启动具有简单设计、干净代码和良好性能的项目。 01 CLI 命令(spf13/cobra) 你想要构建一些 CLI 命令吗？ Cobra 既是一个用于创建强大的现代 CLI 应用程序的库，也是一个用于生成应用程序和命令文件的程序。 我使用这个库来管理命令应用程序，执行运行程序，初始化配置，并启动 Rest API。 基于 cobra 的应用组织结构： ├──</description>
    </item>
    
    <item>
      <title>那些 Go 语言实现的语言现在发展怎么样了？</title>
      <link>https://polarisxu.studygolang.com/posts/go/programming-language-implemented-by-go/</link>
      <pubDate>Mon, 01 Mar 2021 18:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/programming-language-implemented-by-go/</guid>
      <description>大家好，我是站长 polarisxu。 Go 是一门通用编程语言，Go1.5 实现了自举，也就是说，Go 语言是用它自身实现的。经过十来年的发展，开源界使用 Go 语言实现的编程语言不少，那它们发展的怎么样？本文进行一下梳理。 01 Go+ 这是国内七牛老大许式伟主导的，对 Go 语言的扩展，专为数据科学领域打造。目标是取代 Python 在数据科学领域的位置。 项目地址：https://github.com</description>
    </item>
    
    <item>
      <title>金三银四，聊聊换工作的那些事</title>
      <link>https://polarisxu.studygolang.com/posts/talk/2021-change-job/</link>
      <pubDate>Sat, 27 Feb 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/2021-change-job/</guid>
      <description>大家好，我是站长 polarisxu。 下周就进入 3 月份了，正所谓金三银四，是换工作的黄金时间。 实际上从春节开工到现在十天左右时间，「Go语言中文网」上新发的招聘信息不少，从 「Go招聘」公众号上也看到了不少招聘信息。 那到底该不该换工作呢？什么情况下换工作？今天一起聊聊这个话题。 马云曾说，员工离职，原因很多种，但只有两点最真实： 钱，没给到位； 心，委屈了。 这些归根到</description>
    </item>
    
    <item>
      <title>Go 官方应该搞一个类似 Rustup 的管理工具</title>
      <link>https://polarisxu.studygolang.com/posts/go/go-need-like-rustup-tool/</link>
      <pubDate>Thu, 25 Feb 2021 15:10:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/go-need-like-rustup-tool/</guid>
      <description>大家好，我是站长 polarisxu。 搭建开发环境复杂，会让很多新手抓狂。比如看到有人吐槽 Python 环境复杂，而搭建 PHP 环境，出现了很多一键安装包，像 lnmp 等。可见大家开始上手时，希望能够在环境上少一些折腾，别还没入门就劝退。 在早期，搭建 Go 语言开发环境，什么 GOROOT、GOPATH、GOBIN，很多新手一头雾水，经常稀里糊涂配置上了，写项目 go install 一下，找不到编译好的程序跑哪</description>
    </item>
    
    <item>
      <title>克制挺难的</title>
      <link>https://polarisxu.studygolang.com/posts/talk/restraint-is-hard/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/talk/restraint-is-hard/</guid>
      <description>大家好，我是站长 polarisxu。 昨天文章谈了 chi 这个 Go 框架，Kade 留言说，以为 chi 不会用 go mod，没想到去年就用了，但它支持的方式是从 v4.1.2 调到了 v1.5.0，也就是说之前都没有 go.mod，v1.5.0 开始加上了 go.mod。当 Go1.16 发布后，有了 ratract，他立马将其他所有版本都撤回了。面对社区的反对意见，他强硬的说：我在这个项目花了几年时间，尽管许多人不同</description>
    </item>
    
    <item>
      <title>从 go-chi 框架撤回所有主版本聊 Go1.16 的新特性</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/go-chi-use-retract/</link>
      <pubDate>Tue, 23 Feb 2021 18:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/go-chi-use-retract/</guid>
      <description>大家好，我是站长 polarisxu。 在 Reddit 上看到一条消息： go-chi is retracting all major versions with go1.16 new retract directive. go.mod 的变更如下： 这利用了 Go 1.16 中 Module 的新特性。在这之前，先一起学习下该特性。 01 retract：撤回版本 也许不少人没有开发过自己的 Module（模块），但了解模块版本撤回还是有必要的，说不定哪天就能用到。因此建议你能够跟着本文操作一遍。 一般地，模块作者需要一种方法来指示不应该使用某个已发布</description>
    </item>
    
    <item>
      <title>为什么学 Rust 及相关学习资料推荐</title>
      <link>https://polarisxu.studygolang.com/posts/rust/why-rust-and-study-book/</link>
      <pubDate>Sat, 20 Feb 2021 17:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/why-rust-and-study-book/</guid>
      <description>大家好，我是站长 polarisxu。 春节结束，我的 Rust 之旅才刚刚开始。经过春节期间的学习，发现 Rust 真的是有点复杂，好吧，我觉得很复杂。如果你跟我一样，决定学习 Rust，那一定要有心理准备，要啃一块硬骨头，毕竟跟 Go 语言比起来，复杂太多了。 01 为什么要学 Rust 呢？ 看看 Google 上的结果： 爱总是能找到一堆理由，不爱亦如此。比如也有反对你学习 Rust 的，比如这篇：《我为什么反对使用 Rust</description>
    </item>
    
    <item>
      <title>Go1.17 快报：将移除 GOPATH</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-will-remove-gopath/</link>
      <pubDate>Fri, 19 Feb 2021 09:20:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-will-remove-gopath/</guid>
      <description>大家好，我是站长 polarisxu。 是的，没看错，Go 1.16 刚正式发布，但这里说的是 Go1.17 将会包含的改变（不出意外的话），我会出一系列文章介绍 Go1.17 的变化。 关于 Go 1.16 的变化。Reddit 上有一张图总结的挺好的： 相关的知识点，我之前也写过很好几篇文章，有兴趣的可以看看： Go 1.16 的这个新变化需要适应下：go get 和 go install 的变化 提前试用将在 Go1.16 中发布的内嵌静态资源功能 基于 Go1.16 实现静态文件的 HTTP</description>
    </item>
    
    <item>
      <title>Rust 的第一印象</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-first-impression/</link>
      <pubDate>Sun, 14 Feb 2021 23:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-first-impression/</guid>
      <description>大家好，我是站长 polarisxu。 有些朋友应该知道，我最近在看 Rust，在朋友圈我发了一些关于 Rust 相关的东西。2021 年，会陆续写一些 Rust 相关的文章。今天先来一篇。 这篇文章不谈具体的语法，主要从总体上介绍下 Rust，更确切说是 Rust 给我的第一印象，文章（包括后续 Rust 的文章）会和 Go 对比着来，方便 Go 朋友们一起学习、交流。 01 官网 对于中国开发者来说，我认为 Rust 的官网相比 Go 官网</description>
    </item>
    
  </channel>
</rss>
