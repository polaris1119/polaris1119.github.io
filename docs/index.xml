<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polarisxu</title>
    <link>https://polarisxu.studygolang.com/</link>
    <description>Recent content on polarisxu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 polarisxu 和出处链接。</copyright>
    <lastBuildDate>Mon, 07 Jun 2021 21:30:00 +0800</lastBuildDate><atom:link href="https://polarisxu.studygolang.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一本花了2.5年写成的Go免费在线图书</title>
      <link>https://polarisxu.studygolang.com/posts/go/book/practical-go-lessons/</link>
      <pubDate>Mon, 07 Jun 2021 21:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/book/practical-go-lessons/</guid>
      <description>大家好，我是 polarisxu。 又一次为大家推荐 Go 图书，这是一本免费的 Go 语言在线图书：https://www.practical-go-lessons.com/。以下是该书的一个封面： 这本书采用渐进的方式讲解 Go 语言。作者还试图解释一些难以掌握的计算机科学概念，对于新人来说很有用。因此这本书对于那些没有计算机基础的人也有帮助。 我也写过书，也一直在坚持写文章，知</description>
    </item>
    
    <item>
      <title>Go1.17 新特性之切片变数组</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-slice-to-array/</link>
      <pubDate>Mon, 07 Jun 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-slice-to-array/</guid>
      <description>大家好，我是 polarisxu。 按计划，Go 1.17 会在 2021 年 8 月份发布。目前，1.17 相关的功能已经开发差不多了，上次介绍了测试顺序随机的问题，今天介绍 1.17 中的另一个新功能：切片显式地转换成数组指针。 01 数组转切片 介绍新功能之前，我们先看看在 Go 中如何将数组转为切片。（当然，数组指针也是 OK 的） 一般地，通过 slice 表达式（slice expressions）可以从一个数组得到一个</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 08：模式匹配</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-08/</link>
      <pubDate>Sun, 06 Jun 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-08/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 8 个教程，探讨 Rust 中的模式匹配。 01 match 表达式 关于 match 表达式，很多其他语言并没有，比如 Go 语言。不过有些语言开始支持 match，比如 PHP 8.0 就有了 match 表达式。 一般地可以认为 match 和 switch 类似，所以 Rust 中没有 switch。 match 用于检查某个当前的值是否匹配一组/列值中的某一个。看一个具体的例子： fn test_match(number: i32)-&amp;gt; &amp;amp;&amp;#39;staticstr{matchnumber{// 匹配单个值 1=&amp;gt;{println!(&amp;#34;One!&amp;#34;);&amp;#34;One!&amp;#34;},// 匹配多个值 2|3|5|7|11=&amp;gt;&amp;#34;This is a prime&amp;#34;,// 匹配</description>
    </item>
    
    <item>
      <title>Go1.16 中的新函数 signal.NotifyContext 怎么用？</title>
      <link>https://polarisxu.studygolang.com/posts/go/signal-notifycontext/</link>
      <pubDate>Tue, 01 Jun 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/signal-notifycontext/</guid>
      <description>大家好，我是 polarisxu。 os/signal 这个包大家可能用的不多。但自从 Go1.8 起，有些人开始使用这个包了，原因是 Go1.8 在 net/http 包新增了一个方法： func (srv *Server) Shutdown(ctx context.Context) error 有了它就不需要借助第三方库实现优雅关闭服务了。具体怎么做呢？ func main() { server = http.Server{ Addr: &amp;#34;:8080&amp;#34;, } http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { time.Sleep(time.Second * 10) fmt.Fprint(w, &amp;#34;Hello world!&amp;#34;) }) go server.ListenAndServe() // 监听中断信号（CTRL + C） c := make(chan os.Signal, 1) signal.Notify(c, os.Interrupt) &amp;lt;-c // 重置 os.Interrupt 的默认行为 signal.Reset(os.Interrupt) fmt.Println(&amp;#34;shutting down gracefully, press Ctrl+C again to force&amp;#34;) // 给程序最多 5 秒时间处理正在服务的</description>
    </item>
    
    <item>
      <title>Go 1.17 新特性提前学之测试执行随机化</title>
      <link>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-testing-shuffle-flag/</link>
      <pubDate>Sun, 30 May 2021 22:20:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/dynamic/go1.17-testing-shuffle-flag/</guid>
      <description>大家好，我是 polarisxu。 Go1.17 预计在 8 月份发布。目前 tip.golang.org 可以浏览 Go1.17 的相关内容，https://tip.golang.org/doc/go1.17 也有了 Go1.17 相关改动的部分文档。这段时间，我会陆续给大家分享 Go1.17 中相关的新特性，提前学习。。。好吧，提前卷了~ 今天先聊聊在测试中增加的随机化 flag：shuffle。 01 安装 tip 版本 由于 Go1.17 还未发布，因此为了体验它的新特性，我</description>
    </item>
    
    <item>
      <title>Rust 劝退系列 07：流程控制</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-07/</link>
      <pubDate>Tue, 25 May 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-tutorial-07/</guid>
      <description>大家好，我是站长 polarisxu。 这是 Rust 劝退系列的第 7 个教程，探讨 Rust 中的流程控制。注意，跟其他语言一样，Rust 中有条件、循环，但没有 switch，而是有 match 模式匹配。 01 运算符 开始讲解流程控制之前，先补充一个知识点，那就是 Rust 的运算符。 Rust 支持算术运算符、关系运算符、逻辑运算符和位运算符 4 种，它们和其他语言没有什么不同，因此不细讲了，只提醒一点：Rust 中没有自</description>
    </item>
    
    <item>
      <title>官方的 Go 多版本管理：使用和原理</title>
      <link>https://polarisxu.studygolang.com/posts/go/managing-multiple-go-versions/</link>
      <pubDate>Mon, 24 May 2021 20:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/managing-multiple-go-versions/</guid>
      <description>大家好，我是 polarisxu。 有些人可能注意到，每次 Go 发布新版本，官方都会提供类似这样的升级截图： 这可以说是官方的 Go 多版本管理，也是升级 Go 的方式。今天就一起聊一聊这种多版本管理方式及其实现原理。（我之前介绍过一个第三方多版本管理工具 goup ，是我比较推荐的）。 注意，Windows 用户应该使用 WSL2。 01 为什么需要多个 Go 版本 有些人可能觉得没有这样的需求。实际工作中</description>
    </item>
    
    <item>
      <title>Rust新书：给你一个劝退的理由</title>
      <link>https://polarisxu.studygolang.com/posts/rust/rust-new-book-20210520/</link>
      <pubDate>Thu, 20 May 2021 22:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/rust/rust-new-book-20210520/</guid>
      <description>大家好，我是 polarisxu。 过去一段时间，我每周写一篇「Rust 劝退系列」，发现阅读量越来越低。于是我在思考，怎么能够调动大家学习的热情。思考再三，我决定试试这个办法！ 最近看到机械工业出版社出了一本 Rust 新书：《Rust编程：入门、实战和进阶》，我看完目录，发现很符合我一直想要的。 我在学习 Rust 的过程中，发现目前市面上的 Rust 图书，内容组织方式和其他语言的图书不太一</description>
    </item>
    
    <item>
      <title>周刊题解：常量表达式这个规则应该了解下</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/weekly-question-94/</link>
      <pubDate>Thu, 20 May 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/weekly-question-94/</guid>
      <description>大家好，我是 polarisxu。 之前周刊题目正确率一直挺低的，于是我在「94期」出了一道简单的题目，如下： package main import ( &amp;#34;fmt&amp;#34; ) func main() { var ans float64 = 15 + 25 + 5.2 fmt.Println(ans) } 没想到，这道题的正确率也才 62%： 这篇文章就给大家讲解下这道题涉及到的常量表达式的一个知识点。 概念 常量表达式是指仅包含常量操作数，且是在编译的时候进行计算的。 而常量，在 Go 语言中又可以分为无类型常量和有类型常量，也可</description>
    </item>
    
    <item>
      <title>盘点那些使用 Go 语言的国外公司</title>
      <link>https://polarisxu.studygolang.com/posts/go/action/companies-using-golang/</link>
      <pubDate>Wed, 19 May 2021 12:30:00 +0800</pubDate>
      
      <guid>https://polarisxu.studygolang.com/posts/go/action/companies-using-golang/</guid>
      <description>大家好，我是 polarisxu。 一直以来，各种语言都是国外大规模使用，但 Go 语言很不一样，国内更火。因为这样，有些人质疑：Go 也就国人瞎炒作，国外根本没啥公司用。真的是这样吗？今天就盘点一下那些使用 Go 的国外公司，看看他们的案例，希望对大家的技术选型有所借鉴！ 为了更清晰，以下盘点进行了必要的归类。 01 技术平台公司 技术平台提供了一组加速应用程序开发的通用功能，因此可</description>
    </item>
    
  </channel>
</rss>
